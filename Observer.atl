-- $Id$
module Observer;

create OUT : OUTMODEL from IN : INMODEL;

uses Java;
uses strings;

-- ======================================================================
-- model-specific helpers begin
-- ======================================================================

helper context INMODEL!Attribute def : javaSetterNotify(body : String) : String =
	'// Begin Observable stanza\n' +
	'if (this.' + self.name + ' != ' + self.name + ') {\n' +
	'    // Begin original body\n' +
	body +
	'\n    // End original body\n' +
	self.name.javaNotifyStanza(self.originalType().qName()) +
	'}\n' +
	'// End Observable stanza';
	
helper context INMODEL!Attribute def : javaAdderNotify(body : String) : String =
	'// Begin Observable stanza\n' +
	'if (! this.' + self.name + '.contains(' + self.name + ')) {\n' +
	'    // Begin original body\n' +
	body +
	'\n    // End original body\n' +
	self.name.javaNotifyStanza(self.originalType().qName()) +
	'}\n' +
	'// End Observable stanza';
	
helper context INMODEL!Attribute def : javaRemoverNotify(body : String) : String =
	'// Begin Observable stanza\n' +
	'if (this.' + self.name + '.contains(' + self.name + ')) {\n' +
	'    // Begin original body\n' +
	body +
	'\n    // End original body\n' +
	self.name.javaNotifyStanza(self.originalType().qName()) +
	'}\n' +
	'// End Observable stanza';

helper context String def : class() : INMODEL!Class =
	INMODEL!Class.allInstances()->select(c|c.name=self)->first();

helper context String def : interface() : INMODEL!Interface =
	INMODEL!Interface.allInstances()->select(c|c.name=self)->first();

helper context String def : stereotype() : INMODEL!Stereotype =
	INMODEL!Stereotype.allInstances()->select(c|c.name=self)->first();

helper context INMODEL!AssociationEnd def : otherEnd() : INMODEL!AssociationEnd =
	self.association.connection->select(x|x<>self)->first();

helper context INMODEL!AssociationEnd def : navigableFrom() : INMODEL!Classifier =
	self.otherEnd().participant;

helper context INMODEL!Attribute def : hasAssociationEnd() : Boolean =
	not INMODEL!AssociationEnd.allInstances()->select(a|
		a.name=self.name and a.navigableFrom()=self.owner)->isEmpty();

helper context INMODEL!Attribute def : associationEnd() : INMODEL!AssociationEnd =
	INMODEL!AssociationEnd.allInstances()->select(a|
		a.name=self.name and a.navigableFrom()=self.owner)->first();

helper context INMODEL!Attribute def : originalType() : INMODEL!Classifier =
	if self.hasAssociationEnd() then
		self.associationEnd().participant
	else
		self.type
	endif;

helper context INMODEL!Dependency def : isAccessorDependency() : Boolean =
	not self.stereotype->select(s|s.name='accessor')->isEmpty();
	
helper context INMODEL!Operation def : isAccessor() : Boolean =
	not self.clientDependency->select(d|d.isAccessorDependency())->isEmpty();

helper context INMODEL!Operation def : accessorDependency() : INMODEL!Dependency =
	self.clientDependency->select(d|d.isAccessorDependency())->first();

helper context INMODEL!Operation def : accessorFor() : INMODEL!Attribute =
	self.accessorDependency().supplier->select(a|
		a.oclIsKindOf(INMODEL!Attribute))->first();

helper context INMODEL!Operation def : isSubscriber() : Boolean =
	if self.isAccessor() then
		self.accessorFor().hasSubscribesAssociation()
	else
		false
	endif;

helper context INMODEL!Attribute def : hasSubscribesAssociation() : Boolean =
	if self.hasAssociationEnd() then
		not self.associationEnd().association.stereotype
			->select(s|s.name='subscribe')->isEmpty()
	else
		false
	endif;
	
helper context INMODEL!GeneralizableElement def : isObservableType() : Boolean =
	not self.stereotype->select(s|s.name='Observable')->isEmpty();

helper context INMODEL!GeneralizableElement def : isObservableKind() : Boolean =
	if self.isObservableType() then
		true
	else
		not self.generalization->select(g|g.parent.isObservableKind())->isEmpty()
	endif;

helper context INMODEL!GeneralizableElement def : isObserverType() : Boolean =
	not self.stereotype->select(s|s.name='Observer')->isEmpty();

helper context INMODEL!GeneralizableElement def : isObserverKind() : Boolean =
	if self.isObserverType() then
		true
	else
		not self.generalization->select(g|g.parent.isObserverKind())->isEmpty()
	endif;

helper context INMODEL!ProcedureExpression def : method() : INMODEL!Method =
	INMODEL!Method.allInstances()->select(m|m.body=self)->first();

helper context INMODEL!Operation def : javaNotify(body : String) : String =
	if self.name.startsWith('remove') then
		self.accessorFor().javaRemoverNotify(body)
	else if self.name.startsWith('add') or self.name.startsWith('insert') then
		self.accessorFor().javaAdderNotify(body)
	else if self.name.startsWith('set') then
		self.accessorFor().javaSetterNotify(body)
	else
		body
	endif endif endif;

helper context INMODEL!Operation def : javaSubscribe(body : String) : String =
	if self.name.startsWith('remove') then
		self.accessorFor().name.javaRemoverSubscribe(body)
	else if self.name.startsWith('add') or self.name.startsWith('insert') then
		self.accessorFor().name.javaAdderSubscribe(body)
	else if self.name.startsWith('set') then
		self.accessorFor().name.javaSetterSubscribe(body)
	else
		body
	endif endif endif;

helper context INMODEL!ModelElement def : isInPackage() : Boolean =
	not INMODEL!Package.allInstances()->select(p|
		p=self.namespace and p.oclIsTypeOf(INMODEL!Package))->isEmpty();

helper context INMODEL!ModelElement def : qName() : String =
	if self.isInPackage() then
		self.namespace.qName() + '.' + self.name
	else
		self.name
	endif;

-- ======================================================================
-- model-specific helpers end
-- ======================================================================

-- ======================================================================
-- non-mapsTo rules begin
-- ======================================================================

rule ObservableClass {
	from s : INMODEL!Class (s.isObservableType())
	to t : OUTMODEL!Generalization (
	   	namespace <- s.namespace,
		parent <- 'Observable'.class(),
		child <- s)
}

rule ObserverClass {
	from s : INMODEL!Class (s.isObserverType())
	to t : OUTMODEL!Abstraction (
	   	namespace <- s.namespace,
		stereotype <- 'realize'.stereotype(),
		supplier <- Set{'Observer'.interface()},
		client <- Set{s}),
	   op : OUTMODEL!Operation (
	   	name <- 'update',
		owner <- s,
		visibility <- #vk_public,
		ownerScope <- #sk_instance,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   o : OUTMODEL!Parameter (
	   	name <- 'o',
		behavioralFeature <- op,
		type <- 'Observable'.class(),
		kind <- #pdk_in),
	   arg : OUTMODEL!Parameter (
	   	name <- 'arg',
		behavioralFeature <- op,
		type <- 'Object'.class(),
		kind <- #pdk_in),
	   mbody : OUTMODEL!ProcedureExpression (
	   	language <- 'java',
		body <- 'arg'.javaUpdater()),
	   meth : OUTMODEL!Method (
	   	owner <- s,
		body <- mbody,
		specification <- op)
}

-- ======================================================================
-- non-mapsTo rules end
-- ======================================================================

-- ======================================================================
-- mapsTo rules begin
-- ======================================================================

rule ProcedureExpression {
	from s : INMODEL!ProcedureExpression (not (
		 s.method().specification.isAccessor() and
		 (s.method().owner.isObservableKind() or
		  (s.method().owner.isObserverKind() and
		   s.method().specification.isSubscriber()))))
	to t : OUTMODEL!ProcedureExpression mapsTo s (
		language <- s.language,
		body <- s.body)
}

rule NotifyProcedureExpression {
	from s : INMODEL!ProcedureExpression (
		 s.method().specification.isAccessor() and
		 s.method().owner.isObservableKind() and
		 not (s.method().owner.isObserverKind() and
		      s.method().specification.isSubscriber()))
	to t : OUTMODEL!ProcedureExpression mapsTo s (
		language <- s.language,
		body <- s.method().specification.javaNotify(s.body))
}

rule NotifySubscribeProcedureExpression {
	from s : INMODEL!ProcedureExpression (
		 s.method().specification.isAccessor() and
		 s.method().owner.isObservableKind() and
		 s.method().owner.isObserverKind() and
		 s.method().specification.isSubscriber())
	to t : OUTMODEL!ProcedureExpression mapsTo s (
		language <- s.language,
		body <- s.method().specification.javaNotify(
			s.method().specification.javaSubscribe(s.body)))
}

rule SubscribeProcedureExpression {
	from s : INMODEL!ProcedureExpression (
		 s.method().specification.isAccessor() and
		 not s.method().owner.isObservableKind() and
		 s.method().owner.isObserverKind() and
		 s.method().specification.isSubscriber())
	to t : OUTMODEL!ProcedureExpression mapsTo s (
		language <- s.language,
		body <- s.method().specification.javaSubscribe(s.body))
}

-- ======================================================================
-- mapsTo rules end
-- ======================================================================

-- ======================================================================
-- model copy begin
-- ======================================================================
-- Generated by: ModelCopyGenerator.atl 1087 dwagelaa

rule Parameter {
    from s : INMODEL!Parameter
    to t : OUTMODEL!Parameter mapsTo s (
        isSpecification <- s.isSpecification,
        kind <- s.kind,
        visibility <- s.visibility,
        defaultValue <- s.defaultValue,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        type <- s.type,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule Operation {
    from s : INMODEL!Operation
    to t : OUTMODEL!Operation mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        concurrency <- s.concurrency,
        specification <- s.specification,
        isQuery <- s.isQuery,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        name <- s.name,
        isAbstract <- s.isAbstract,
        parameter <- s.parameter,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule Include {
    from s : INMODEL!Include
    to t : OUTMODEL!Include mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        base <- s.base,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency,
        addition <- s.addition)
}

rule Object {
    from s : INMODEL!Object (s.oclIsTypeOf(INMODEL!Object))
    to t : OUTMODEL!Object mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        linkEnd <- s.linkEnd,
        ownedInstance <- s.ownedInstance,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        classifier <- s.classifier,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        ownedLink <- s.ownedLink,
        componentInstance <- s.componentInstance,
        slot <- s.slot,
        clientDependency <- s.clientDependency)
}

rule TagDefinition {
    from s : INMODEL!TagDefinition
    to t : OUTMODEL!TagDefinition mapsTo s (
        isSpecification <- s.isSpecification,
        multiplicity <- s.multiplicity,
        tagType <- s.tagType,
        visibility <- s.visibility,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule Multiplicity {
    from s : INMODEL!Multiplicity
    to t : OUTMODEL!Multiplicity mapsTo s (
        range <- s.range)
}

rule Class {
    from s : INMODEL!Class (s.oclIsTypeOf(INMODEL!Class))
    to t : OUTMODEL!Class mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isActive <- s.isActive,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        sourceFlow <- s.sourceFlow,
        ownedElement <- s.ownedElement,
        comment <- s.comment,
        stereotype <- s.stereotype,
        powertypeRange <- s.powertypeRange,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        feature <- s.feature,
        clientDependency <- s.clientDependency)
}

rule Stereotype {
    from s : INMODEL!Stereotype
    to t : OUTMODEL!Stereotype mapsTo s (
        isSpecification <- s.isSpecification,
        icon <- s.icon,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        baseClass <- s.baseClass,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        definedTag <- s.definedTag,
        templateParameter <- s.templateParameter,
        stereotypeConstraint <- s.stereotypeConstraint,
        clientDependency <- s.clientDependency)
}

rule Collaboration {
    from s : INMODEL!Collaboration
    to t : OUTMODEL!Collaboration mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        sourceFlow <- s.sourceFlow,
        representedClassifier <- s.representedClassifier,
        ownedElement <- s.ownedElement,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        interaction <- s.interaction,
        taggedValue <- s.taggedValue,
        constrainingElement <- s.constrainingElement,
        templateParameter <- s.templateParameter,
        representedOperation <- s.representedOperation,
        usedCollaboration <- s.usedCollaboration,
        clientDependency <- s.clientDependency)
}

rule CallAction {
    from s : INMODEL!CallAction
    to t : OUTMODEL!CallAction mapsTo s (
        isSpecification <- s.isSpecification,
        target <- s.target,
        visibility <- s.visibility,
        name <- s.name,
        recurrence <- s.recurrence,
        isAsynchronous <- s.isAsynchronous,
        script <- s.script,
        actualArgument <- s.actualArgument,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        operation <- s.operation,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule Model {
    from s : INMODEL!Model
    to t : OUTMODEL!Model mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        sourceFlow <- s.sourceFlow,
        ownedElement <- s.ownedElement,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        elementImport <- s.elementImport,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule ReturnAction {
    from s : INMODEL!ReturnAction
    to t : OUTMODEL!ReturnAction mapsTo s (
        isSpecification <- s.isSpecification,
        target <- s.target,
        visibility <- s.visibility,
        name <- s.name,
        recurrence <- s.recurrence,
        isAsynchronous <- s.isAsynchronous,
        script <- s.script,
        actualArgument <- s.actualArgument,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule LinkEnd {
    from s : INMODEL!LinkEnd
    to t : OUTMODEL!LinkEnd mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        associationEnd <- s.associationEnd,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        instance <- s.instance,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency,
        qualifiedValue <- s.qualifiedValue)
}

rule Abstraction {
    from s : INMODEL!Abstraction
    to t : OUTMODEL!Abstraction mapsTo s (
        isSpecification <- s.isSpecification,
        mapping <- s.mapping,
        visibility <- s.visibility,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        supplier <- s.supplier,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        client <- s.client,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule MultiplicityRange {
    from s : INMODEL!MultiplicityRange
    to t : OUTMODEL!MultiplicityRange mapsTo s (
        lower <- s.lower,
        upper <- s.upper)
}

rule Argument {
    from s : INMODEL!Argument
    to t : OUTMODEL!Argument mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        value <- s.value,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule Stimulus {
    from s : INMODEL!Stimulus
    to t : OUTMODEL!Stimulus mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        receiver <- s.receiver,
        dispatchAction <- s.dispatchAction,
        sourceFlow <- s.sourceFlow,
        argument <- s.argument,
        communicationLink <- s.communicationLink,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        sender <- s.sender,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule Dependency {
    from s : INMODEL!Dependency (s.oclIsTypeOf(INMODEL!Dependency))
    to t : OUTMODEL!Dependency mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        supplier <- s.supplier,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        client <- s.client,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule Actor {
    from s : INMODEL!Actor
    to t : OUTMODEL!Actor mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        sourceFlow <- s.sourceFlow,
        ownedElement <- s.ownedElement,
        comment <- s.comment,
        stereotype <- s.stereotype,
        powertypeRange <- s.powertypeRange,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        feature <- s.feature,
        clientDependency <- s.clientDependency)
}

rule UseCase {
    from s : INMODEL!UseCase
    to t : OUTMODEL!UseCase mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        include <- s.include,
        sourceFlow <- s.sourceFlow,
        ownedElement <- s.ownedElement,
        comment <- s.comment,
        extensionPoint <- s.extensionPoint,
        stereotype <- s.stereotype,
        powertypeRange <- s.powertypeRange,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        feature <- s.feature,
        clientDependency <- s.clientDependency,
        extend <- s.extend)
}

rule Link {
    from s : INMODEL!Link (s.oclIsTypeOf(INMODEL!Link))
    to t : OUTMODEL!Link mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        association <- s.association,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        connection <- s.connection,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule Message {
    from s : INMODEL!Message
    to t : OUTMODEL!Message mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        conformingStimulus <- s.conformingStimulus,
        communicationConnection <- s.communicationConnection,
        sourceFlow <- s.sourceFlow,
        receiver <- s.receiver,
        comment <- s.comment,
        predecessor <- s.predecessor,
        stereotype <- s.stereotype,
        activator <- s.activator,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        action <- s.action,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        sender <- s.sender,
        clientDependency <- s.clientDependency)
}

rule InteractionInstanceSet {
    from s : INMODEL!InteractionInstanceSet
    to t : OUTMODEL!InteractionInstanceSet mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        participatingStimulus <- s.participatingStimulus,
        templateParameter <- s.templateParameter,
        interaction <- s.interaction,
        clientDependency <- s.clientDependency)
}

rule Interface {
    from s : INMODEL!Interface
    to t : OUTMODEL!Interface mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        sourceFlow <- s.sourceFlow,
        ownedElement <- s.ownedElement,
        comment <- s.comment,
        stereotype <- s.stereotype,
        powertypeRange <- s.powertypeRange,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        feature <- s.feature,
        clientDependency <- s.clientDependency)
}

rule Attribute {
    from s : INMODEL!Attribute
    to t : OUTMODEL!Attribute mapsTo s (
        multiplicity <- s.multiplicity,
        isSpecification <- s.isSpecification,
        ordering <- s.ordering,
        visibility <- s.visibility,
        targetScope <- s.targetScope,
        ownerScope <- s.ownerScope,
        initialValue <- s.initialValue,
        changeability <- s.changeability,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        type <- s.type,
        clientDependency <- s.clientDependency)
}

rule TaggedValue {
    from s : INMODEL!TaggedValue
    to t : OUTMODEL!TaggedValue mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        dataValue <- s.dataValue,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        type <- s.type,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        referenceValue <- s.referenceValue,
        clientDependency <- s.clientDependency)
}

rule AssociationEnd {
    from s : INMODEL!AssociationEnd (s.oclIsTypeOf(INMODEL!AssociationEnd))
    to t : OUTMODEL!AssociationEnd mapsTo s (
        isSpecification <- s.isSpecification,
        targetScope <- s.targetScope,
        visibility <- s.visibility,
        ordering <- s.ordering,
        changeability <- s.changeability,
        isNavigable <- s.isNavigable,
        aggregation <- s.aggregation,
        multiplicity <- s.multiplicity,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        qualifier <- s.qualifier,
        specification <- s.specification,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        participant <- s.participant,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule Association {
    from s : INMODEL!Association (s.oclIsTypeOf(INMODEL!Association))
    to t : OUTMODEL!Association mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        connection <- s.connection,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule CollaborationInstanceSet {
    from s : INMODEL!CollaborationInstanceSet
    to t : OUTMODEL!CollaborationInstanceSet mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        sourceFlow <- s.sourceFlow,
        participatingInstance <- s.participatingInstance,
        interactionInstanceSet <- s.interactionInstanceSet,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        participatingLink <- s.participatingLink,
        clientDependency <- s.clientDependency,
        collaboration <- s.collaboration,
        constrainingElement <- s.constrainingElement)
}

rule Method {
    from s : INMODEL!Method
    to t : OUTMODEL!Method mapsTo s (
        isSpecification <- s.isSpecification,
        isQuery <- s.isQuery,
        visibility <- s.visibility,
        ownerScope <- s.ownerScope,
        name <- s.name,
        body <- s.body,
        parameter <- s.parameter,
        sourceFlow <- s.sourceFlow,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency,
        specification <- s.specification)
}

rule Generalization {
    from s : INMODEL!Generalization
    to t : OUTMODEL!Generalization mapsTo s (
        isSpecification <- s.isSpecification,
        visibility <- s.visibility,
        name <- s.name,
        discriminator <- s.discriminator,
        powertype <- s.powertype,
        sourceFlow <- s.sourceFlow,
        child <- s.child,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        parent <- s.parent,
        clientDependency <- s.clientDependency)
}

rule Package {
    from s : INMODEL!Package (s.oclIsTypeOf(INMODEL!Package))
    to t : OUTMODEL!Package mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        sourceFlow <- s.sourceFlow,
        ownedElement <- s.ownedElement,
        comment <- s.comment,
        stereotype <- s.stereotype,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        elementImport <- s.elementImport,
        templateParameter <- s.templateParameter,
        clientDependency <- s.clientDependency)
}

rule DataType {
    from s : INMODEL!DataType (s.oclIsTypeOf(INMODEL!DataType))
    to t : OUTMODEL!DataType mapsTo s (
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        name <- s.name,
        generalization <- s.generalization,
        sourceFlow <- s.sourceFlow,
        ownedElement <- s.ownedElement,
        comment <- s.comment,
        stereotype <- s.stereotype,
        powertypeRange <- s.powertypeRange,
        targetFlow <- s.targetFlow,
        constraint <- s.constraint,
        taggedValue <- s.taggedValue,
        templateParameter <- s.templateParameter,
        feature <- s.feature,
        clientDependency <- s.clientDependency)
}

rule Expression {
    from s : INMODEL!Expression (s.oclIsTypeOf(INMODEL!Expression))
    to t : OUTMODEL!Expression mapsTo s (
        language <- s.language,
        body <- s.body)
}

-- ======================================================================
-- model copy end
-- ======================================================================
