-- Generated by: $Id: ModelCopyGenerator.atl 875 2005-04-20 13:46:26Z dwagelaa $
module ModelCopy;

create OUT : OUTMODEL from IN : INMODEL;

rule TemplateParameter {
    from s : INMODEL!TemplateParameter
    to t : OUTMODEL!TemplateParameter mapsTo s (
        parameter <- s.parameter,
        defaultElement <- s.defaultElement)
}

rule ObjectFlowState {
    from s : INMODEL!ObjectFlowState
    to t : OUTMODEL!ObjectFlowState mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        isSynch <- s.isSynch,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        entry <- s.entry,
        internalTransition <- s.internalTransition,
        exit <- s.exit,
        type <- s.type,
        stereotype <- s.stereotype,
        deferrableEvent <- s.deferrableEvent,
        parameter <- s.parameter,
        outgoing <- s.outgoing,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule AssociationRole {
    from s : INMODEL!AssociationRole
    to t : OUTMODEL!AssociationRole mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        multiplicity <- s.multiplicity,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        conformingLink <- s.conformingLink,
        stereotype <- s.stereotype,
        message <- s.message,
        constraint <- s.constraint,
        connection <- s.connection,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        base <- s.base)
}

rule Partition {
    from s : INMODEL!Partition
    to t : OUTMODEL!Partition mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        contents <- s.contents,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ClassifierRole {
    from s : INMODEL!ClassifierRole
    to t : OUTMODEL!ClassifierRole mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        multiplicity <- s.multiplicity,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        base <- s.base,
        conformingInstance <- s.conformingInstance,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        availableFeature <- s.availableFeature,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        availableContents <- s.availableContents,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Usage {
    from s : INMODEL!Usage
    to t : OUTMODEL!Usage mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        supplier <- s.supplier,
        client <- s.client,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Expression {
    from s : INMODEL!Expression (s.oclIsTypeOf(INMODEL!Expression))
    to t : OUTMODEL!Expression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule Attribute {
    from s : INMODEL!Attribute
    to t : OUTMODEL!Attribute mapsTo s (
        name <- s.name,
        targetScope <- s.targetScope,
        changeability <- s.changeability,
        ownerScope <- s.ownerScope,
        visibility <- s.visibility,
        ordering <- s.ordering,
        multiplicity <- s.multiplicity,
        initialValue <- s.initialValue,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        type <- s.type,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Binding {
    from s : INMODEL!Binding
    to t : OUTMODEL!Binding mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        supplier <- s.supplier,
        client <- s.client,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        argument <- s.argument)
}

rule Signal {
    from s : INMODEL!Signal (s.oclIsTypeOf(INMODEL!Signal))
    to t : OUTMODEL!Signal mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Permission {
    from s : INMODEL!Permission
    to t : OUTMODEL!Permission mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        supplier <- s.supplier,
        client <- s.client,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule BooleanExpression {
    from s : INMODEL!BooleanExpression
    to t : OUTMODEL!BooleanExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule Association {
    from s : INMODEL!Association (s.oclIsTypeOf(INMODEL!Association))
    to t : OUTMODEL!Association mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        connection <- s.connection,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Object {
    from s : INMODEL!Object (s.oclIsTypeOf(INMODEL!Object))
    to t : OUTMODEL!Object mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        slot <- s.slot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        linkEnd <- s.linkEnd,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        ownedInstance <- s.ownedInstance,
        classifier <- s.classifier,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        ownedLink <- s.ownedLink,
        templateParameter <- s.templateParameter,
        componentInstance <- s.componentInstance)
}

rule IterationExpression {
    from s : INMODEL!IterationExpression
    to t : OUTMODEL!IterationExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule Argument {
    from s : INMODEL!Argument
    to t : OUTMODEL!Argument mapsTo s (
        value <- s.value,
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule UseCase {
    from s : INMODEL!UseCase
    to t : OUTMODEL!UseCase mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        extensionPoint <- s.extensionPoint,
        stereotype <- s.stereotype,
        include <- s.include,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        extend <- s.extend,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ChangeEvent {
    from s : INMODEL!ChangeEvent
    to t : OUTMODEL!ChangeEvent mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        changeExpression <- s.changeExpression,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        parameter <- s.parameter)
}

rule SynchState {
    from s : INMODEL!SynchState
    to t : OUTMODEL!SynchState mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        bound <- s.bound,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        outgoing <- s.outgoing,
        constraint <- s.constraint,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ExtensionPoint {
    from s : INMODEL!ExtensionPoint
    to t : OUTMODEL!ExtensionPoint mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        location <- s.location,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule UninterpretedAction {
    from s : INMODEL!UninterpretedAction
    to t : OUTMODEL!UninterpretedAction mapsTo s (
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        script <- s.script,
        recurrence <- s.recurrence,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        target <- s.target,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        actualArgument <- s.actualArgument,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Stimulus {
    from s : INMODEL!Stimulus
    to t : OUTMODEL!Stimulus mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        dispatchAction <- s.dispatchAction,
        targetFlow <- s.targetFlow,
        communicationLink <- s.communicationLink,
        receiver <- s.receiver,
        argument <- s.argument,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        sender <- s.sender)
}

rule MappingExpression {
    from s : INMODEL!MappingExpression
    to t : OUTMODEL!MappingExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule Artifact {
    from s : INMODEL!Artifact
    to t : OUTMODEL!Artifact mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule LinkEnd {
    from s : INMODEL!LinkEnd
    to t : OUTMODEL!LinkEnd mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        associationEnd <- s.associationEnd,
        stereotype <- s.stereotype,
        instance <- s.instance,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        qualifiedValue <- s.qualifiedValue)
}

rule MultiplicityRange {
    from s : INMODEL!MultiplicityRange
    to t : OUTMODEL!MultiplicityRange mapsTo s (
        upper <- s.upper,
        lower <- s.lower)
}

rule FinalState {
    from s : INMODEL!FinalState
    to t : OUTMODEL!FinalState mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        entry <- s.entry,
        internalTransition <- s.internalTransition,
        exit <- s.exit,
        stereotype <- s.stereotype,
        deferrableEvent <- s.deferrableEvent,
        outgoing <- s.outgoing,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Guard {
    from s : INMODEL!Guard
    to t : OUTMODEL!Guard mapsTo s (
        name <- s.name,
        expression <- s.expression,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule DataValue {
    from s : INMODEL!DataValue
    to t : OUTMODEL!DataValue mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        slot <- s.slot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        linkEnd <- s.linkEnd,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        ownedInstance <- s.ownedInstance,
        classifier <- s.classifier,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        ownedLink <- s.ownedLink,
        templateParameter <- s.templateParameter,
        componentInstance <- s.componentInstance)
}

rule ActionSequence {
    from s : INMODEL!ActionSequence
    to t : OUTMODEL!ActionSequence mapsTo s (
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        script <- s.script,
        recurrence <- s.recurrence,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        target <- s.target,
        taggedValue <- s.taggedValue,
        action <- s.action,
        targetFlow <- s.targetFlow,
        actualArgument <- s.actualArgument,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Primitive {
    from s : INMODEL!Primitive
    to t : OUTMODEL!Primitive mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule TagDefinition {
    from s : INMODEL!TagDefinition
    to t : OUTMODEL!TagDefinition mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        multiplicity <- s.multiplicity,
        isSpecification <- s.isSpecification,
        tagType <- s.tagType,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule CallAction {
    from s : INMODEL!CallAction
    to t : OUTMODEL!CallAction mapsTo s (
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        script <- s.script,
        recurrence <- s.recurrence,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        target <- s.target,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        actualArgument <- s.actualArgument,
        stereotype <- s.stereotype,
        operation <- s.operation,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ObjectSetExpression {
    from s : INMODEL!ObjectSetExpression
    to t : OUTMODEL!ObjectSetExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule CollaborationInstanceSet {
    from s : INMODEL!CollaborationInstanceSet
    to t : OUTMODEL!CollaborationInstanceSet mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        participatingInstance <- s.participatingInstance,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        collaboration <- s.collaboration,
        stereotype <- s.stereotype,
        participatingLink <- s.participatingLink,
        constrainingElement <- s.constrainingElement,
        constraint <- s.constraint,
        interactionInstanceSet <- s.interactionInstanceSet,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Include {
    from s : INMODEL!Include
    to t : OUTMODEL!Include mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        addition <- s.addition,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        base <- s.base)
}

rule AssociationClass {
    from s : INMODEL!AssociationClass
    to t : OUTMODEL!AssociationClass mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isActive <- s.isActive,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        connection <- s.connection,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Class {
    from s : INMODEL!Class (s.oclIsTypeOf(INMODEL!Class))
    to t : OUTMODEL!Class mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isActive <- s.isActive,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ReturnAction {
    from s : INMODEL!ReturnAction
    to t : OUTMODEL!ReturnAction mapsTo s (
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        script <- s.script,
        recurrence <- s.recurrence,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        target <- s.target,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        actualArgument <- s.actualArgument,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule TemplateArgument {
    from s : INMODEL!TemplateArgument
    to t : OUTMODEL!TemplateArgument mapsTo s (
        modelElement <- s.modelElement)
}

rule AttributeLink {
    from s : INMODEL!AttributeLink
    to t : OUTMODEL!AttributeLink mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        attribute <- s.attribute,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        value <- s.value)
}

rule Reception {
    from s : INMODEL!Reception
    to t : OUTMODEL!Reception mapsTo s (
        name <- s.name,
        ownerScope <- s.ownerScope,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        isLeaf <- s.isLeaf,
        specification <- s.specification,
        isQuery <- s.isQuery,
        isAbstract <- s.isAbstract,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        parameter <- s.parameter,
        targetFlow <- s.targetFlow,
        signal <- s.signal,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Interaction {
    from s : INMODEL!Interaction
    to t : OUTMODEL!Interaction mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        message <- s.message,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule DestroyAction {
    from s : INMODEL!DestroyAction
    to t : OUTMODEL!DestroyAction mapsTo s (
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        script <- s.script,
        recurrence <- s.recurrence,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        target <- s.target,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        actualArgument <- s.actualArgument,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule SubmachineState {
    from s : INMODEL!SubmachineState (s.oclIsTypeOf(INMODEL!SubmachineState))
    to t : OUTMODEL!SubmachineState mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isConcurrent <- s.isConcurrent,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        entry <- s.entry,
        internalTransition <- s.internalTransition,
        exit <- s.exit,
        stereotype <- s.stereotype,
        deferrableEvent <- s.deferrableEvent,
        outgoing <- s.outgoing,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        submachine <- s.submachine,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        subvertex <- s.subvertex,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Parameter {
    from s : INMODEL!Parameter
    to t : OUTMODEL!Parameter mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        kind <- s.kind,
        isSpecification <- s.isSpecification,
        defaultValue <- s.defaultValue,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        type <- s.type,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Exception {
    from s : INMODEL!Exception
    to t : OUTMODEL!Exception mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule TerminateAction {
    from s : INMODEL!TerminateAction
    to t : OUTMODEL!TerminateAction mapsTo s (
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        script <- s.script,
        recurrence <- s.recurrence,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        target <- s.target,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        actualArgument <- s.actualArgument,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Stereotype {
    from s : INMODEL!Stereotype
    to t : OUTMODEL!Stereotype mapsTo s (
        name <- s.name,
        icon <- s.icon,
        baseClass <- s.baseClass,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        stereotypeConstraint <- s.stereotypeConstraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        definedTag <- s.definedTag,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ActivityGraph {
    from s : INMODEL!ActivityGraph
    to t : OUTMODEL!ActivityGraph mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        top <- s.top,
        submachineState <- s.submachineState,
        targetFlow <- s.targetFlow,
        partition <- s.partition,
        stereotype <- s.stereotype,
        transitions <- s.transitions,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule SubsystemInstance {
    from s : INMODEL!SubsystemInstance
    to t : OUTMODEL!SubsystemInstance mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        slot <- s.slot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        linkEnd <- s.linkEnd,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        ownedInstance <- s.ownedInstance,
        classifier <- s.classifier,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        ownedLink <- s.ownedLink,
        templateParameter <- s.templateParameter,
        componentInstance <- s.componentInstance)
}

rule DataType {
    from s : INMODEL!DataType (s.oclIsTypeOf(INMODEL!DataType))
    to t : OUTMODEL!DataType mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Abstraction {
    from s : INMODEL!Abstraction
    to t : OUTMODEL!Abstraction mapsTo s (
        mapping <- s.mapping,
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        supplier <- s.supplier,
        client <- s.client,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ActionExpression {
    from s : INMODEL!ActionExpression
    to t : OUTMODEL!ActionExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule Pseudostate {
    from s : INMODEL!Pseudostate
    to t : OUTMODEL!Pseudostate mapsTo s (
        name <- s.name,
        kind <- s.kind,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        outgoing <- s.outgoing,
        constraint <- s.constraint,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Method {
    from s : INMODEL!Method
    to t : OUTMODEL!Method mapsTo s (
        name <- s.name,
        body <- s.body,
        ownerScope <- s.ownerScope,
        visibility <- s.visibility,
        isQuery <- s.isQuery,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        parameter <- s.parameter,
        targetFlow <- s.targetFlow,
        specification <- s.specification,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule TypeExpression {
    from s : INMODEL!TypeExpression
    to t : OUTMODEL!TypeExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule ProgrammingLanguageDataType {
    from s : INMODEL!ProgrammingLanguageDataType
    to t : OUTMODEL!ProgrammingLanguageDataType mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        expression <- s.expression,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule CallState {
    from s : INMODEL!CallState
    to t : OUTMODEL!CallState mapsTo s (
        dynamicMultiplicity <- s.dynamicMultiplicity,
        name <- s.name,
        visibility <- s.visibility,
        isDynamic <- s.isDynamic,
        dynamicArguments <- s.dynamicArguments,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        entry <- s.entry,
        internalTransition <- s.internalTransition,
        exit <- s.exit,
        stereotype <- s.stereotype,
        deferrableEvent <- s.deferrableEvent,
        outgoing <- s.outgoing,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Transition {
    from s : INMODEL!Transition
    to t : OUTMODEL!Transition mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        trigger <- s.trigger,
        targetFlow <- s.targetFlow,
        source <- s.source,
        target <- s.target,
        guard <- s.guard,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        effect <- s.effect,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Subsystem {
    from s : INMODEL!Subsystem
    to t : OUTMODEL!Subsystem mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isInstantiable <- s.isInstantiable,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        elementImport <- s.elementImport,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ArgListsExpression {
    from s : INMODEL!ArgListsExpression
    to t : OUTMODEL!ArgListsExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule SignalEvent {
    from s : INMODEL!SignalEvent
    to t : OUTMODEL!SignalEvent mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        signal <- s.signal,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        parameter <- s.parameter)
}

rule TimeEvent {
    from s : INMODEL!TimeEvent
    to t : OUTMODEL!TimeEvent mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        when <- s.when,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        parameter <- s.parameter)
}

rule Node {
    from s : INMODEL!Node
    to t : OUTMODEL!Node mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        deployedComponent <- s.deployedComponent,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Message {
    from s : INMODEL!Message
    to t : OUTMODEL!Message mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        conformingStimulus <- s.conformingStimulus,
        targetFlow <- s.targetFlow,
        action <- s.action,
        activator <- s.activator,
        predecessor <- s.predecessor,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        receiver <- s.receiver,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        sender <- s.sender,
        communicationConnection <- s.communicationConnection)
}

rule Interface {
    from s : INMODEL!Interface
    to t : OUTMODEL!Interface mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule AssociationEnd {
    from s : INMODEL!AssociationEnd (s.oclIsTypeOf(INMODEL!AssociationEnd))
    to t : OUTMODEL!AssociationEnd mapsTo s (
        targetScope <- s.targetScope,
        aggregation <- s.aggregation,
        ordering <- s.ordering,
        name <- s.name,
        changeability <- s.changeability,
        visibility <- s.visibility,
        multiplicity <- s.multiplicity,
        isNavigable <- s.isNavigable,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        participant <- s.participant,
        targetFlow <- s.targetFlow,
        specification <- s.specification,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        qualifier <- s.qualifier)
}

rule LinkObject {
    from s : INMODEL!LinkObject
    to t : OUTMODEL!LinkObject mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        slot <- s.slot,
        taggedValue <- s.taggedValue,
        connection <- s.connection,
        targetFlow <- s.targetFlow,
        linkEnd <- s.linkEnd,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        ownedInstance <- s.ownedInstance,
        association <- s.association,
        classifier <- s.classifier,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        ownedLink <- s.ownedLink,
        templateParameter <- s.templateParameter,
        componentInstance <- s.componentInstance)
}

rule ElementResidence {
    from s : INMODEL!ElementResidence
    to t : OUTMODEL!ElementResidence mapsTo s (
        visibility <- s.visibility,
        resident <- s.resident)
}

rule Dependency {
    from s : INMODEL!Dependency (s.oclIsTypeOf(INMODEL!Dependency))
    to t : OUTMODEL!Dependency mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        supplier <- s.supplier,
        client <- s.client,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule TimeExpression {
    from s : INMODEL!TimeExpression
    to t : OUTMODEL!TimeExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule UseCaseInstance {
    from s : INMODEL!UseCaseInstance
    to t : OUTMODEL!UseCaseInstance mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        slot <- s.slot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        linkEnd <- s.linkEnd,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        ownedInstance <- s.ownedInstance,
        classifier <- s.classifier,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        ownedLink <- s.ownedLink,
        templateParameter <- s.templateParameter,
        componentInstance <- s.componentInstance)
}

rule Generalization {
    from s : INMODEL!Generalization
    to t : OUTMODEL!Generalization mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        discriminator <- s.discriminator,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        parent <- s.parent,
        powertype <- s.powertype,
        sourceFlow <- s.sourceFlow,
        child <- s.child,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule SimpleState {
    from s : INMODEL!SimpleState (s.oclIsTypeOf(INMODEL!SimpleState))
    to t : OUTMODEL!SimpleState mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        entry <- s.entry,
        internalTransition <- s.internalTransition,
        exit <- s.exit,
        stereotype <- s.stereotype,
        deferrableEvent <- s.deferrableEvent,
        outgoing <- s.outgoing,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Extend {
    from s : INMODEL!Extend
    to t : OUTMODEL!Extend mapsTo s (
        condition <- s.condition,
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        extensionPoint <- s.extensionPoint,
        sourceFlow <- s.sourceFlow,
        base <- s.base,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        extension <- s.extension)
}

rule Comment {
    from s : INMODEL!Comment
    to t : OUTMODEL!Comment mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        body <- s.body,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        annotatedElement <- s.annotatedElement)
}

rule ElementImport {
    from s : INMODEL!ElementImport
    to t : OUTMODEL!ElementImport mapsTo s (
        alias <- s.alias,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        importedElement <- s.importedElement)
}

rule Package {
    from s : INMODEL!Package (s.oclIsTypeOf(INMODEL!Package))
    to t : OUTMODEL!Package mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        elementImport <- s.elementImport,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ProcedureExpression {
    from s : INMODEL!ProcedureExpression
    to t : OUTMODEL!ProcedureExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule ActionState {
    from s : INMODEL!ActionState (s.oclIsTypeOf(INMODEL!ActionState))
    to t : OUTMODEL!ActionState mapsTo s (
        dynamicMultiplicity <- s.dynamicMultiplicity,
        name <- s.name,
        visibility <- s.visibility,
        isDynamic <- s.isDynamic,
        dynamicArguments <- s.dynamicArguments,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        entry <- s.entry,
        internalTransition <- s.internalTransition,
        exit <- s.exit,
        stereotype <- s.stereotype,
        deferrableEvent <- s.deferrableEvent,
        outgoing <- s.outgoing,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule EnumerationLiteral {
    from s : INMODEL!EnumerationLiteral
    to t : OUTMODEL!EnumerationLiteral mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Operation {
    from s : INMODEL!Operation
    to t : OUTMODEL!Operation mapsTo s (
        concurrency <- s.concurrency,
        name <- s.name,
        ownerScope <- s.ownerScope,
        visibility <- s.visibility,
        isQuery <- s.isQuery,
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        specification <- s.specification,
        taggedValue <- s.taggedValue,
        parameter <- s.parameter,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule StateMachine {
    from s : INMODEL!StateMachine (s.oclIsTypeOf(INMODEL!StateMachine))
    to t : OUTMODEL!StateMachine mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        top <- s.top,
        submachineState <- s.submachineState,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        transitions <- s.transitions,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule CallEvent {
    from s : INMODEL!CallEvent
    to t : OUTMODEL!CallEvent mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        operation <- s.operation,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        parameter <- s.parameter)
}

rule ComponentInstance {
    from s : INMODEL!ComponentInstance
    to t : OUTMODEL!ComponentInstance mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        slot <- s.slot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        resident <- s.resident,
        linkEnd <- s.linkEnd,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        ownedInstance <- s.ownedInstance,
        classifier <- s.classifier,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        ownedLink <- s.ownedLink,
        templateParameter <- s.templateParameter,
        componentInstance <- s.componentInstance,
        nodeInstance <- s.nodeInstance)
}

rule Collaboration {
    from s : INMODEL!Collaboration
    to t : OUTMODEL!Collaboration mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        constrainingElement <- s.constrainingElement,
        representedClassifier <- s.representedClassifier,
        generalization <- s.generalization,
        representedOperation <- s.representedOperation,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        usedCollaboration <- s.usedCollaboration,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        interaction <- s.interaction)
}

rule SubactivityState {
    from s : INMODEL!SubactivityState
    to t : OUTMODEL!SubactivityState mapsTo s (
        isDynamic <- s.isDynamic,
        name <- s.name,
        visibility <- s.visibility,
        dynamicMultiplicity <- s.dynamicMultiplicity,
        isConcurrent <- s.isConcurrent,
        isSpecification <- s.isSpecification,
        dynamicArguments <- s.dynamicArguments,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        entry <- s.entry,
        internalTransition <- s.internalTransition,
        exit <- s.exit,
        stereotype <- s.stereotype,
        deferrableEvent <- s.deferrableEvent,
        outgoing <- s.outgoing,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        submachine <- s.submachine,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        subvertex <- s.subvertex,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule CreateAction {
    from s : INMODEL!CreateAction
    to t : OUTMODEL!CreateAction mapsTo s (
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        script <- s.script,
        recurrence <- s.recurrence,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        target <- s.target,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        actualArgument <- s.actualArgument,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        instantiation <- s.instantiation)
}

rule AssociationEndRole {
    from s : INMODEL!AssociationEndRole
    to t : OUTMODEL!AssociationEndRole mapsTo s (
        targetScope <- s.targetScope,
        aggregation <- s.aggregation,
        ordering <- s.ordering,
        name <- s.name,
        changeability <- s.changeability,
        visibility <- s.visibility,
        multiplicity <- s.multiplicity,
        isNavigable <- s.isNavigable,
        collaborationMultiplicity <- s.collaborationMultiplicity,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        participant <- s.participant,
        targetFlow <- s.targetFlow,
        availableQualifier <- s.availableQualifier,
        base <- s.base,
        specification <- s.specification,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        qualifier <- s.qualifier)
}

rule StubState {
    from s : INMODEL!StubState
    to t : OUTMODEL!StubState mapsTo s (
        name <- s.name,
        referenceState <- s.referenceState,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        outgoing <- s.outgoing,
        constraint <- s.constraint,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule SendAction {
    from s : INMODEL!SendAction
    to t : OUTMODEL!SendAction mapsTo s (
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        script <- s.script,
        recurrence <- s.recurrence,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        target <- s.target,
        signal <- s.signal,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        actualArgument <- s.actualArgument,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule InteractionInstanceSet {
    from s : INMODEL!InteractionInstanceSet
    to t : OUTMODEL!InteractionInstanceSet mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        participatingStimulus <- s.participatingStimulus,
        stereotype <- s.stereotype,
        interaction <- s.interaction,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Enumeration {
    from s : INMODEL!Enumeration
    to t : OUTMODEL!Enumeration mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        literal <- s.literal,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Component {
    from s : INMODEL!Component
    to t : OUTMODEL!Component mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        implementation <- s.implementation,
        residentElement <- s.residentElement)
}

rule Link {
    from s : INMODEL!Link (s.oclIsTypeOf(INMODEL!Link))
    to t : OUTMODEL!Link mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        connection <- s.connection,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        association <- s.association,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Actor {
    from s : INMODEL!Actor
    to t : OUTMODEL!Actor mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule ClassifierInState {
    from s : INMODEL!ClassifierInState
    to t : OUTMODEL!ClassifierInState mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        type <- s.type,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        powertypeRange <- s.powertypeRange,
        sourceFlow <- s.sourceFlow,
        inState <- s.inState,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule Flow {
    from s : INMODEL!Flow
    to t : OUTMODEL!Flow mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        target <- s.target,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        source <- s.source)
}

rule Model {
    from s : INMODEL!Model
    to t : OUTMODEL!Model mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isAbstract <- s.isAbstract,
        isLeaf <- s.isLeaf,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        ownedElement <- s.ownedElement,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        elementImport <- s.elementImport,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule CompositeState {
    from s : INMODEL!CompositeState (s.oclIsTypeOf(INMODEL!CompositeState))
    to t : OUTMODEL!CompositeState mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isConcurrent <- s.isConcurrent,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        entry <- s.entry,
        internalTransition <- s.internalTransition,
        exit <- s.exit,
        stereotype <- s.stereotype,
        deferrableEvent <- s.deferrableEvent,
        outgoing <- s.outgoing,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        incoming <- s.incoming,
        sourceFlow <- s.sourceFlow,
        subvertex <- s.subvertex,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter)
}

rule TaggedValue {
    from s : INMODEL!TaggedValue
    to t : OUTMODEL!TaggedValue mapsTo s (
        name <- s.name,
        dataValue <- s.dataValue,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        type <- s.type,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        referenceValue <- s.referenceValue)
}

rule Constraint {
    from s : INMODEL!Constraint
    to t : OUTMODEL!Constraint mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        body <- s.body,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        templateParameter <- s.templateParameter,
        constrainedElement <- s.constrainedElement)
}

rule Multiplicity {
    from s : INMODEL!Multiplicity
    to t : OUTMODEL!Multiplicity mapsTo s (
        range <- s.range)
}

rule NodeInstance {
    from s : INMODEL!NodeInstance
    to t : OUTMODEL!NodeInstance mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        slot <- s.slot,
        taggedValue <- s.taggedValue,
        targetFlow <- s.targetFlow,
        resident <- s.resident,
        linkEnd <- s.linkEnd,
        stereotype <- s.stereotype,
        constraint <- s.constraint,
        sourceFlow <- s.sourceFlow,
        ownedInstance <- s.ownedInstance,
        classifier <- s.classifier,
        clientDependency <- s.clientDependency,
        comment <- s.comment,
        ownedLink <- s.ownedLink,
        templateParameter <- s.templateParameter,
        componentInstance <- s.componentInstance)
}

