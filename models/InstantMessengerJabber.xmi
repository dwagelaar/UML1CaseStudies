<?xml version = '1.0' encoding = 'UTF-8' ?>
<XMI xmi.version = '1.2' xmlns:UML = 'org.omg.xmi.namespace.UML' timestamp = 'Tue May 24 17:24:48 CEST 2005'>
  <XMI.header>
    <XMI.documentation>
      <XMI.exporter>Netbeans XMI Writer</XMI.exporter>
      <XMI.exporterVersion>1.0</XMI.exporterVersion>
    </XMI.documentation>
  </XMI.header>
  <XMI.content>
    <UML:Model xmi.id = 'Im2d596f98m10363d93b95mm3656' name = 'InstantMessengerModel'
      isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
      <UML:ModelElement.taggedValue>
        <UML:TaggedValue xmi.id = 'Im2cb8f81bm103a15f60fdmm6589' isSpecification = 'false'>
          <UML:TaggedValue.dataValue>&lt;p&gt;(C) 2005, Dennis Wagelaar, System and Software Engineering Lab, Vrije Universiteit Brussel&lt;/p&gt;
&lt;p&gt;All rights reserved.&lt;/p&gt;
&lt;p&gt;Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.&lt;/li&gt;
&lt;li&gt;Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.&lt;/li&gt;
&lt;li&gt;Neither the name of JabberWookie nor the names of its contributors may be used
to endorse or promote products derived from this software without specific
prior written permission.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;</UML:TaggedValue.dataValue>
          <UML:TaggedValue.type>
            <UML:TagDefinition xmi.idref = 'I47da90f2m1037dab50c8mm6c7d'/>
          </UML:TaggedValue.type>
        </UML:TaggedValue>
      </UML:ModelElement.taggedValue>
      <UML:Namespace.ownedElement>
        <UML:Package xmi.id = 'Im2d596f98m10363d93b95mm36d4' name = 'im' visibility = 'public'
          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Namespace.ownedElement>
            <UML:Package xmi.id = 'Im2d596f98m10363d93b95mm37b2' name = 'model' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
              <UML:Namespace.ownedElement>
                <UML:Class xmi.id = 'Im2d596f98m10363d93b95mm3848' name = 'Contact' visibility = 'public'
                  isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'
                  isActive = 'false'/>
                <UML:Class xmi.id = 'Im2d596f98m10363d93b95mm383a' name = 'Message' visibility = 'public'
                  isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'
                  isActive = 'false'/>
              </UML:Namespace.ownedElement>
            </UML:Package>
            <UML:Package xmi.id = 'Im2d596f98m10363d93b95mm3762' name = 'networking'
              visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
              isAbstract = 'false'>
              <UML:Namespace.ownedElement>
                <UML:Generalization xmi.id = 'Im2d596f98m10363d93b95mm37a2' isSpecification = 'false'>
                  <UML:Generalization.child>
                    <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
                  </UML:Generalization.child>
                  <UML:Generalization.parent>
                    <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm37a4'/>
                  </UML:Generalization.parent>
                </UML:Generalization>
                <UML:Package xmi.id = 'Im2d596f98m10363d93b95mm3770' name = 'jabber' visibility = 'public'
                  isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
                  <UML:Namespace.ownedElement>
                    <UML:Class xmi.id = 'Im2d596f98m10363d93b95mm378c' name = 'Jabber' visibility = 'public'
                      isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'
                      isActive = 'false'>
                      <UML:ModelElement.clientDependency>
                        <UML:Abstraction xmi.idref = 'I6e742d0m1039cde3951mm668b'/>
                        <UML:Abstraction xmi.idref = 'I6e742d0m1039cde3951mm667d'/>
                        <UML:Abstraction xmi.idref = 'I6e742d0m1039cde3951mm666f'/>
                        <UML:Dependency xmi.idref = 'I5e1f0371m103888fb12amm670b'/>
                        <UML:Dependency xmi.idref = 'Im7dc8534am10389aee3admm688e'/>
                        <UML:Dependency xmi.idref = 'I5e1f0371m103888fb12amm66f2'/>
                        <UML:Dependency xmi.idref = 'I742480e1m1040f4c9758mm7bd1'/>
                      </UML:ModelElement.clientDependency>
                      <UML:GeneralizableElement.generalization>
                        <UML:Generalization xmi.idref = 'Im2d596f98m10363d93b95mm37a2'/>
                      </UML:GeneralizableElement.generalization>
                      <UML:Classifier.feature>
                        <UML:Operation xmi.id = 'Im160e6027m10364dd6223mm6870' name = 'Jabber' visibility = 'public'
                          isSpecification = 'false' ownerScope = 'instance' isQuery = 'false' concurrency = 'sequential'
                          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
                          <UML:ModelElement.stereotype>
                            <UML:Stereotype xmi.idref = 'Im2d596f98m10363d93b95mm3666'/>
                          </UML:ModelElement.stereotype>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'Im160e6027m10364dd6223mm684e' name = 'return' isSpecification = 'false'
                              kind = 'return'>
                              <UML:Parameter.type>
                                <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Operation xmi.id = 'Im2d596f98m10363d93b95mm379c' name = 'send' visibility = 'public'
                          isSpecification = 'false' ownerScope = 'instance' isQuery = 'false' concurrency = 'sequential'
                          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'Im2d596f98m10363d93b95mm379e' name = 'msg' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm383a'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Method xmi.id = 'Im2d596f98m10363d93b95mm3798' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'Im2d596f98m10363d93b95mm379a' language = 'java'
                              body = '        try {&#10;            if (getConnection() == null) {&#10;                throw new java.io.IOException(&quot;Cannot send message: connection not established&quot;);&#10;            }&#10;            Message message = new Message();&#10;            message.setTo(msg.getRecipient());&#10;            message.setFrom(msg.getSender());&#10;            message.setBody(msg.getContent().toString());&#10;            System.out.println(&quot;Sending &quot; + msg + &quot;: &quot; + message);&#10;            getConnection().send(message);&#10;        } catch (java.io.IOException e) {&#10;            System.err.println(e.getMessage());&#10;        }&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'Im2d596f98m10363d93b95mm379c'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Method xmi.id = 'Im160e6027m10364dd6223mm686e' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'Im160e6027m10364dd6223mm686f' language = 'java'
                              body = '        setName(&quot;Jabber&quot;);&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'Im160e6027m10364dd6223mm6870'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Operation xmi.id = 'I5e1f0371m103888fb12amm67cf' name = 'login' visibility = 'public'
                          isSpecification = 'false' ownerScope = 'instance' isQuery = 'false' concurrency = 'sequential'
                          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'I5e1f0371m103888fb12amm67d0' name = 'uid' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm367c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                            <UML:Parameter xmi.id = 'I5e1f0371m103888fb12amm67d1' name = 'pwd' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm367c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                            <UML:Parameter xmi.id = 'I5e1f0371m103888fb12amm67d2' name = 'return' isSpecification = 'false'
                              kind = 'return'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm366c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Method xmi.id = 'I5e1f0371m103888fb12amm67d3' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'I5e1f0371m103888fb12amm67d4' language = 'java'
                              body = '        try {&#10;            this.uid = uid; &#10;            java.util.StringTokenizer address = new java.util.StringTokenizer(uid, &quot;@&quot;);&#10;            String user = address.nextToken();&#10;            String server = address.nextToken();&#10;            address = new java.util.StringTokenizer(server, &quot;/&quot;);&#10;            server = address.nextToken();&#10;            String resource = address.nextToken();&#10;            setSocket(connect(server, 5222));&#10;            if (getSocket() == null) {&#10;                throw new SocketException(connectError);&#10;            }&#10;            setConnection(new Client2Server(getSocket().getInputStream(), getSocket().getOutputStream()));&#10;            if (!getConnection().open(server, 60000)) {&#10;                throw new ConnectException(&quot;Could not establish stream to &quot; + server + &quot;:5222 after 60 seconds&quot;);&#10;            }&#10;            getConnection().setMessageListener(this);&#10;            getConnection().setIQListener(this);&#10;            getConnection().setPresenceListener(this);&#10;            boolean try_again;&#10;            do {&#10;                try_again = false;&#10;                System.out.println(&quot;Logging in &quot; + uid);&#10;                switch (getConnection().loginAny(user, resource, pwd, 30000)) {&#10;                    case Client2Server.LOGIN_BAD_PASS:&#10;                        throw new ConnectException(&quot;Bad password for &quot; + uid);&#10;                    case Client2Server.LOGIN_BAD_UID:&#10;                        if (!registerUser(user, pwd))&#10;                            throw new ConnectException(&quot;Could not register user for &quot; + uid);&#10;                        else&#10;                            try_again = true;&#10;                        break;&#10;                    case Client2Server.LOGIN_FAILED:&#10;                        throw new ConnectException(&quot;Login failed: unknown: &quot; + uid);&#10;                    case Client2Server.LOGIN_PASS_EXP:&#10;                        System.out.println(&quot;Your password has expired for &quot; + uid);&#10;                        break;&#10;                    case Client2Server.LOGIN_OK:&#10;                        break;&#10;                }&#10;            } while (try_again);&#10;            Presence pres = new Presence(Const.AVAILABLE, &quot;Available&quot;, 1);&#10;            pres.setFrom(uid);&#10;            getConnection().send(pres);&#10;            incomingPresence(pres);&#10;            getConnection().send(IQRoster.createGetRequest());&#10;            return true;&#10;        } catch (Exception e) {&#10;            System.err.println(e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;        return false;&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'I5e1f0371m103888fb12amm67cf'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Method xmi.id = 'I5e1f0371m103888fb12amm6634' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'I5e1f0371m103888fb12amm6635' language = 'java'
                              body = '        System.out.println(&quot;Registering &quot; + user + &quot; at &quot; + getConnection().getServerName());&#10;        try {&#10;            java.util.Hashtable info = IQRegister.getRequiredRegInfo(getConnection());&#10;            String key, value;&#10;            for (java.util.Enumeration e = info.keys(); e.hasMoreElements();) {&#10;                key = (String) e.nextElement();&#10;                value = (String) info.get(key);&#10;                if (key.equals(Const.USERNAME))&#10;                    info.put(key, user);&#10;                else if (key.equals(Const.PASSWORD))&#10;                    info.put(key, pwd);&#10;                else if (key.equals(Const.EMAIL))&#10;                    info.put(key, user + &quot;@&quot; + getConnection().getServerName());&#10;                else if (key.equals(Const.INSTRUCTIONS))&#10;                    ;&#10;                else&#10;                    System.err.println(&quot;Unknown registration parameter: &quot; + key);&#10;            }&#10;            Chunk chunk = getConnection().send(&#10;                IQRegister.createSetRequest(getConnection().getServerName(), info), 30000);&#10;            return (chunk != null &amp;&amp; chunk.getType().equals(Const.RESULT));&#10;        } catch (java.io.IOException e) {&#10;            System.err.println(e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;        return false;&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'I5e1f0371m103888fb12amm6636'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Operation xmi.id = 'I694706b7m1039ca3fd82mm67b9' name = 'logout' visibility = 'public'
                          isSpecification = 'false' ownerScope = 'instance' isQuery = 'false' concurrency = 'sequential'
                          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
                        <UML:Operation xmi.id = 'I71c9f5d4m103a6a19cb2mm6440' name = 'addContact'
                          visibility = 'public' isSpecification = 'false' ownerScope = 'instance'
                          isQuery = 'false' concurrency = 'sequential' isRoot = 'false' isLeaf = 'false'
                          isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'I71c9f5d4m103a6a19cb2mm6428' name = 'c' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm3848'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Operation xmi.id = 'I71c9f5d4m103a6a19cb2mm6400' name = 'removeContact'
                          visibility = 'public' isSpecification = 'false' ownerScope = 'instance'
                          isQuery = 'false' concurrency = 'sequential' isRoot = 'false' isLeaf = 'false'
                          isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'I71c9f5d4m103a6a19cb2mm63e8' name = 'c' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm3848'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Operation xmi.id = 'Im7dc8534am10389aee3admm684f' name = 'incomingMessage'
                          visibility = 'public' isSpecification = 'false' ownerScope = 'instance'
                          isQuery = 'false' concurrency = 'sequential' isRoot = 'false' isLeaf = 'false'
                          isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'Im7dc8534am10389aee3admm6837' name = 'message'
                              isSpecification = 'false' kind = 'in'>
                              <UML:Parameter.type>
                                <UML:Class xmi.idref = 'Im7dc8534am10389aee3admm6850'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Operation xmi.id = 'I6e742d0m1039cde3951mm65e4' name = 'incomingIQ'
                          visibility = 'public' isSpecification = 'false' ownerScope = 'instance'
                          isQuery = 'false' concurrency = 'sequential' isRoot = 'false' isLeaf = 'false'
                          isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'I6e742d0m1039cde3951mm65cb' name = 'iq' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:Class xmi.idref = 'I6e742d0m1039cde3951mm65cc'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Operation xmi.id = 'I6e742d0m1039cde3951mm65a3' name = 'incomingPresence'
                          visibility = 'public' isSpecification = 'false' ownerScope = 'instance'
                          isQuery = 'false' concurrency = 'sequential' isRoot = 'false' isLeaf = 'false'
                          isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'I6e742d0m1039cde3951mm658b' name = 'presence' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:Class xmi.idref = 'Im7dc8534am10389aee3admm6851'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Operation xmi.id = 'I5e1f0371m103888fb12amm6636' name = 'registerUser'
                          visibility = 'private' isSpecification = 'false' ownerScope = 'instance'
                          isQuery = 'false' concurrency = 'sequential' isRoot = 'false' isLeaf = 'false'
                          isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'I5e1f0371m103888fb12amm661e' name = 'user' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm367c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                            <UML:Parameter xmi.id = 'I5e1f0371m103888fb12amm661d' name = 'pwd' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm367c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                            <UML:Parameter xmi.id = 'I5e1f0371m103888fb12amm661c' name = 'return' isSpecification = 'false'
                              kind = 'return'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm366c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Method xmi.id = 'Im7dc8534am10389aee3admm684d' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'Im7dc8534am10389aee3admm684e' language = 'java'
                              body = '        System.out.println(&quot;Message: &quot; + message);&#10;        im.model.Message msg = new im.model.Message();&#10;        msg.setSender(stripResource(message.getFrom()));&#10;        msg.setRecipient(message.getTo());&#10;        msg.setContent(message.getBody());&#10;        setRecvMsg(msg);&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'Im7dc8534am10389aee3admm684f'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Operation xmi.id = 'I557b91aem103941c6d3fmm6839' name = 'connect' visibility = 'private'
                          isSpecification = 'false' ownerScope = 'instance' isQuery = 'false' concurrency = 'sequential'
                          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'I557b91aem103941c6d3fmm683a' name = 'host' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm367c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                            <UML:Parameter xmi.id = 'I557b91aem103941c6d3fmm683b' name = 'port' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm3674'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                            <UML:Parameter xmi.id = 'I557b91aem103941c6d3fmm681c' name = 'return' isSpecification = 'false'
                              kind = 'return'>
                              <UML:Parameter.type>
                                <UML:Class xmi.idref = 'I5e1f0371m103888fb12amm6763'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Method xmi.id = 'I557b91aem103941c6d3fmm683c' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'I557b91aem103941c6d3fmm683d' language = 'java'
                              body = '        Socket s = null;&#10;        try {&#10;            InetAddress[] hosts = InetAddress.getAllByName(host);&#10;            java.util.Stack exceptions = new java.util.Stack();&#10;            for (int i = 0; i &lt; hosts.length; i++) {&#10;                try {&#10;                    s = new Socket(hosts[i], port);&#10;                    break;&#10;                } catch (Exception e) {&#10;                    exceptions.push(e);&#10;                }&#10;            }&#10;            StringBuffer sb = new StringBuffer();&#10;            while (!exceptions.empty()) {&#10;                sb.append(((Exception) exceptions.pop()).getMessage());&#10;            }&#10;            connectError = sb.toString();&#10;        } catch (Exception e) {&#10;            connectError = e.getMessage();&#10;        }&#10;        return s;&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'I557b91aem103941c6d3fmm6839'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Method xmi.id = 'I694706b7m1039ca3fd82mm67b7' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'I694706b7m1039ca3fd82mm67b8' language = 'java'
                              body = '        try {&#10;            if (getConnection() == null) {&#10;                throw new java.io.IOException(&quot;Cannot logout: connection not established&quot;);&#10;            }&#10;            System.out.println(&quot;Closing connection for &quot; + getConnection().getServerName());&#10;            Presence p = new Presence();&#10;            p.setType(Const.UNAVAILABLE);&#10;            getConnection().send(p);&#10;            getConnection().close();&#10;        } catch (java.io.IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'I694706b7m1039ca3fd82mm67b9'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Attribute xmi.id = 'I6e742d0m1039cde3951mm6896' name = 'connectError'
                          visibility = 'private' isSpecification = 'false' ownerScope = 'instance'
                          changeability = 'changeable'>
                          <UML:Attribute.initialValue>
                            <UML:Expression xmi.id = 'I6e742d0m1039cde3951mm687b' language = 'java'
                              body = '&quot;&quot;'/>
                          </UML:Attribute.initialValue>
                          <UML:StructuralFeature.type>
                            <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm367c'/>
                          </UML:StructuralFeature.type>
                        </UML:Attribute>
                        <UML:Method xmi.id = 'I6e742d0m1039cde3951mm65e2' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'I6e742d0m1039cde3951mm65e3' language = 'java'
                              body = '        java.util.Enumeration children = iq.getChildren().elements();&#10;        while (children.hasMoreElements()) {&#10;            com.ssttr.xml.XMLElement el = (com.ssttr.xml.XMLElement) children.nextElement();&#10;            if (el instanceof IQRoster) {&#10;                for (java.util.Enumeration items = el.enumerateChildren(); items.hasMoreElements();) {&#10;                    IQRoster.Item item = (IQRoster.Item) items.nextElement();&#10;                    System.out.println(&quot;Roster Item: &quot; + item);&#10;                    if (item.getSubscription().equals(Const.BOTH) || &#10;                            item.getSubscription().equals(Const.TO)) {&#10;                        im.model.Contact c = new im.model.Contact();&#10;                        c.setNetwork(this);&#10;                        c.setUserId(item.getJID());&#10;                        c.setName(item.getItemName());&#10;                        setRecvContact(c);&#10;                    }&#10;                }&#10;            } else {&#10;                System.out.println(&quot;Unknown iq element: &quot; + el);&#10;            }&#10;        }&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'I6e742d0m1039cde3951mm65e4'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Method xmi.id = 'I6e742d0m1039cde3951mm65a1' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'I6e742d0m1039cde3951mm65a2' language = 'java'
                              body = '        String type = presence.getType();&#10;        if (type == null) type = &quot;&quot;;&#10;        if (type.equals(Const.SUBSCRIBE)) {&#10;            // someone wants to subscribe to our presence&#10;            // so we slightly re-write the packet to send back &#10;            presence.setType(Const.SUBSCRIBED);&#10;            System.out.println(presence.getFrom() + &quot; wants to subscribe to your presence, allowing.&quot;);&#10;        } else if (type.equals(Const.UNSUBSCRIBE)) {&#10;            // someone wants to unsubscribe from our presence&#10;            // so we slightly re-write the packet to send back &#10;            presence.setType(Const.UNSUBSCRIBED);&#10;            System.out.println(presence.getFrom() + &quot; wants to unsubscribe from your presence, allowing.&quot;);&#10;        } else if (type.equals(Const.SUBSCRIBED)) {&#10;            System.out.println(&quot;Subscribed to: &quot; + presence);&#10;        } else if (type.equals(Const.UNSUBSCRIBED)) {&#10;            System.out.println(&quot;Unsubscribed from: &quot; + presence);&#10;        } else if (type.equals(Const.UNAVAILABLE)) {&#10;            im.model.Contact c = new im.model.Contact();&#10;            c.setNetwork(this);&#10;            c.setUserId(stripResource(presence.getFrom()));&#10;            c.setStatus(&quot;offline&quot;);&#10;            setRecvContact(c);&#10;            return;&#10;        } else {&#10;            System.out.println(&quot;Received presence: &quot; + presence);&#10;            im.model.Contact c = new im.model.Contact();&#10;            c.setNetwork(this);&#10;            c.setUserId(stripResource(presence.getFrom()));&#10;            if (presence.getShow() != null)&#10;            &#9;c.setStatus(presence.getShow());&#10;            else&#10;            &#9;c.setStatus(Const.AVAILABLE);&#10;            setRecvContact(c);&#10;            return;&#10;        }&#10;        // make sure to return it to the sender and not ourselves&#10;        String from = presence.getTo();&#10;        presence.setTo(presence.getFrom());&#10;        presence.setFrom(from);&#10;        try {&#10;            getConnection().send(presence);&#10;        } catch (java.io.IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'I6e742d0m1039cde3951mm65a3'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Operation xmi.id = 'I71c9f5d4m103a6a19cb2mm65be' name = 'stripResource'
                          visibility = 'private' isSpecification = 'false' ownerScope = 'instance'
                          isQuery = 'false' concurrency = 'sequential' isRoot = 'false' isLeaf = 'false'
                          isAbstract = 'false'>
                          <UML:BehavioralFeature.parameter>
                            <UML:Parameter xmi.id = 'I71c9f5d4m103a6a19cb2mm65a6' name = 'jid' isSpecification = 'false'
                              kind = 'in'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm367c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                            <UML:Parameter xmi.id = 'I71c9f5d4m103a6a19cb2mm65a5' name = 'return' isSpecification = 'false'
                              kind = 'return'>
                              <UML:Parameter.type>
                                <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm367c'/>
                              </UML:Parameter.type>
                            </UML:Parameter>
                          </UML:BehavioralFeature.parameter>
                        </UML:Operation>
                        <UML:Method xmi.id = 'I71c9f5d4m103a6a19cb2mm65bc' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'I71c9f5d4m103a6a19cb2mm65bd' language = 'java'
                              body = '        if (uid.equals(jid)) {&#10;        &#9;return jid;&#10;        } else { // strip resource bit if remote user&#10;        &#9;java.util.StringTokenizer strip =&#10;        &#9;&#9;new java.util.StringTokenizer(jid, &quot;/&quot;);&#10;        &#9;return strip.nextToken();&#10;        }&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'I71c9f5d4m103a6a19cb2mm65be'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Attribute xmi.id = 'I71c9f5d4m103a6a19cb2mm6552' name = 'uid' visibility = 'private'
                          isSpecification = 'false' ownerScope = 'instance' changeability = 'changeable'>
                          <UML:Attribute.initialValue>
                            <UML:Expression xmi.id = 'I71c9f5d4m103a6a19cb2mm6541' language = 'java'
                              body = '&quot;&quot;'/>
                          </UML:Attribute.initialValue>
                          <UML:StructuralFeature.type>
                            <UML:DataType xmi.idref = 'Im2d596f98m10363d93b95mm367c'/>
                          </UML:StructuralFeature.type>
                        </UML:Attribute>
                        <UML:Method xmi.id = 'I71c9f5d4m103a6a19cb2mm643e' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'I71c9f5d4m103a6a19cb2mm643f' language = 'java'
                              body = '        try {&#10;            if (getConnection() == null) {&#10;                throw new java.io.IOException(&quot;Cannot add contact: connection not established&quot;);&#10;            }&#10;            Presence presence = new Presence(c.getUserId(), Const.SUBSCRIBE);&#10;            System.out.println(&quot;Adding contact &quot; + presence);&#10;            getConnection().send(presence);&#10;            IQRoster roster = new IQRoster();&#10;            roster.addItem(c.getUserId(), c.getName());&#10;            IQ iq = new IQ(Const.SET);&#10;            iq.addChild(roster);&#10;            getConnection().send(iq);&#10;        } catch (java.io.IOException e) {&#10;            System.err.println(e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'I71c9f5d4m103a6a19cb2mm6440'/>
                          </UML:Method.specification>
                        </UML:Method>
                        <UML:Method xmi.id = 'I71c9f5d4m103a6a19cb2mm63fe' isSpecification = 'false'
                          isQuery = 'false'>
                          <UML:Method.body>
                            <UML:ProcedureExpression xmi.id = 'I71c9f5d4m103a6a19cb2mm63ff' language = 'java'
                              body = '        try {&#10;            if (getConnection() == null) {&#10;                throw new java.io.IOException(&quot;Cannot remove contact: connection not established&quot;);&#10;            }&#10;            IQRoster roster = new IQRoster();&#10;            roster.addItem(c.getUserId());&#10;            ((IQRoster.Item) roster.getChild(0)).setSubscription(Const.REMOVE);&#10;            IQ iq = new IQ(Const.SET);&#10;            iq.addChild(roster);&#10;            getConnection().send(iq);&#10;            Presence presence = new Presence(c.getUserId(), Const.UNSUBSCRIBE);&#10;            System.out.println(&quot;Removing contact &quot; + presence);&#10;            getConnection().send(presence);&#10;       &#9;} catch (java.io.IOException e) {&#10;            System.err.println(e.getMessage());&#10;            e.printStackTrace();&#10;       &#9;}&#10;'/>
                          </UML:Method.body>
                          <UML:Method.specification>
                            <UML:Operation xmi.idref = 'I71c9f5d4m103a6a19cb2mm6400'/>
                          </UML:Method.specification>
                        </UML:Method>
                      </UML:Classifier.feature>
                    </UML:Class>
                    <UML:Association xmi.id = 'I5e1f0371m103888fb12amm6782' isSpecification = 'false'
                      isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
                      <UML:Association.connection>
                        <UML:AssociationEnd xmi.id = 'I5e1f0371m103888fb12amm6788' visibility = 'public'
                          isSpecification = 'false' isNavigable = 'false' ordering = 'unordered' aggregation = 'composite'
                          targetScope = 'instance' changeability = 'changeable'>
                          <UML:AssociationEnd.multiplicity>
                            <UML:Multiplicity xmi.id = 'I5e1f0371m103888fb12amm6786'>
                              <UML:Multiplicity.range>
                                <UML:MultiplicityRange xmi.id = 'I5e1f0371m103888fb12amm6787' lower = '1'
                                  upper = '1'/>
                              </UML:Multiplicity.range>
                            </UML:Multiplicity>
                          </UML:AssociationEnd.multiplicity>
                          <UML:AssociationEnd.participant>
                            <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
                          </UML:AssociationEnd.participant>
                        </UML:AssociationEnd>
                        <UML:AssociationEnd xmi.id = 'I5e1f0371m103888fb12amm6785' name = 'connection'
                          visibility = 'public' isSpecification = 'false' isNavigable = 'true' ordering = 'unordered'
                          aggregation = 'none' targetScope = 'instance' changeability = 'changeable'>
                          <UML:AssociationEnd.multiplicity>
                            <UML:Multiplicity xmi.id = 'I5e1f0371m103888fb12amm6783'>
                              <UML:Multiplicity.range>
                                <UML:MultiplicityRange xmi.id = 'I5e1f0371m103888fb12amm6784' lower = '1'
                                  upper = '1'/>
                              </UML:Multiplicity.range>
                            </UML:Multiplicity>
                          </UML:AssociationEnd.multiplicity>
                          <UML:ModelElement.taggedValue>
                            <UML:TaggedValue xmi.id = 'I5e1f0371m103888fb12amm6765' isSpecification = 'false'>
                              <UML:TaggedValue.dataValue></UML:TaggedValue.dataValue>
                              <UML:TaggedValue.type>
                                <UML:TagDefinition xmi.idref = 'Im2d596f98m10363d93b95mm3694'/>
                              </UML:TaggedValue.type>
                            </UML:TaggedValue>
                          </UML:ModelElement.taggedValue>
                          <UML:AssociationEnd.participant>
                            <UML:Class xmi.idref = 'I5e1f0371m103888fb12amm67ab'/>
                          </UML:AssociationEnd.participant>
                        </UML:AssociationEnd>
                      </UML:Association.connection>
                    </UML:Association>
                    <UML:Association xmi.id = 'I5e1f0371m103888fb12amm673a' name = '' isSpecification = 'false'
                      isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
                      <UML:Association.connection>
                        <UML:AssociationEnd xmi.id = 'I5e1f0371m103888fb12amm6740' visibility = 'public'
                          isSpecification = 'false' isNavigable = 'false' ordering = 'unordered' aggregation = 'composite'
                          targetScope = 'instance' changeability = 'changeable'>
                          <UML:AssociationEnd.multiplicity>
                            <UML:Multiplicity xmi.id = 'I5e1f0371m103888fb12amm673e'>
                              <UML:Multiplicity.range>
                                <UML:MultiplicityRange xmi.id = 'I5e1f0371m103888fb12amm673f' lower = '1'
                                  upper = '1'/>
                              </UML:Multiplicity.range>
                            </UML:Multiplicity>
                          </UML:AssociationEnd.multiplicity>
                          <UML:AssociationEnd.participant>
                            <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
                          </UML:AssociationEnd.participant>
                        </UML:AssociationEnd>
                        <UML:AssociationEnd xmi.id = 'I5e1f0371m103888fb12amm673d' name = 'socket'
                          visibility = 'public' isSpecification = 'false' isNavigable = 'true' ordering = 'unordered'
                          aggregation = 'none' targetScope = 'instance' changeability = 'changeable'>
                          <UML:AssociationEnd.multiplicity>
                            <UML:Multiplicity xmi.id = 'I5e1f0371m103888fb12amm673b'>
                              <UML:Multiplicity.range>
                                <UML:MultiplicityRange xmi.id = 'I5e1f0371m103888fb12amm673c' lower = '1'
                                  upper = '1'/>
                              </UML:Multiplicity.range>
                            </UML:Multiplicity>
                          </UML:AssociationEnd.multiplicity>
                          <UML:AssociationEnd.participant>
                            <UML:Class xmi.idref = 'I5e1f0371m103888fb12amm6763'/>
                          </UML:AssociationEnd.participant>
                        </UML:AssociationEnd>
                      </UML:Association.connection>
                    </UML:Association>
                  </UML:Namespace.ownedElement>
                </UML:Package>
                <UML:Abstraction xmi.id = 'I6e742d0m1039cde3951mm668b' isSpecification = 'false'>
                  <UML:ModelElement.stereotype>
                    <UML:Stereotype xmi.idref = 'Im2d596f98m10363d93b95mm368c'/>
                  </UML:ModelElement.stereotype>
                  <UML:Dependency.client>
                    <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
                  </UML:Dependency.client>
                  <UML:Dependency.supplier>
                    <UML:Interface xmi.idref = 'I6e742d0m1039cde3951mm6690'/>
                  </UML:Dependency.supplier>
                </UML:Abstraction>
                <UML:Abstraction xmi.id = 'I6e742d0m1039cde3951mm667d' isSpecification = 'false'>
                  <UML:ModelElement.stereotype>
                    <UML:Stereotype xmi.idref = 'Im2d596f98m10363d93b95mm368c'/>
                  </UML:ModelElement.stereotype>
                  <UML:Dependency.client>
                    <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
                  </UML:Dependency.client>
                  <UML:Dependency.supplier>
                    <UML:Interface xmi.idref = 'I6e742d0m1039cde3951mm6682'/>
                  </UML:Dependency.supplier>
                </UML:Abstraction>
                <UML:Abstraction xmi.id = 'I6e742d0m1039cde3951mm666f' isSpecification = 'false'>
                  <UML:ModelElement.stereotype>
                    <UML:Stereotype xmi.idref = 'Im2d596f98m10363d93b95mm368c'/>
                  </UML:ModelElement.stereotype>
                  <UML:Dependency.client>
                    <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
                  </UML:Dependency.client>
                  <UML:Dependency.supplier>
                    <UML:Interface xmi.idref = 'I6e742d0m1039cde3951mm6674'/>
                  </UML:Dependency.supplier>
                </UML:Abstraction>
                <UML:Class xmi.id = 'Im2d596f98m10363d93b95mm37a4' name = 'Network' visibility = 'public'
                  isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'true'
                  isActive = 'false'>
                  <UML:ModelElement.stereotype>
                    <UML:Stereotype xmi.idref = 'Im2d596f98m10363d93b95mm3692'/>
                  </UML:ModelElement.stereotype>
                </UML:Class>
              </UML:Namespace.ownedElement>
            </UML:Package>
          </UML:Namespace.ownedElement>
        </UML:Package>
        <UML:Package xmi.id = 'Im2d596f98m10363d93b95mm369c' name = 'java' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Namespace.ownedElement>
            <UML:Package xmi.id = 'I5e1f0371m103888fb12amm6764' name = 'net' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
              <UML:Namespace.ownedElement>
                <UML:Class xmi.id = 'I5e1f0371m103888fb12amm6763' name = 'Socket' visibility = 'public'
                  isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'
                  isActive = 'false'/>
              </UML:Namespace.ownedElement>
            </UML:Package>
            <UML:Dependency xmi.id = 'I5e1f0371m103888fb12amm670b' isSpecification = 'false'>
              <UML:Dependency.client>
                <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
              </UML:Dependency.client>
              <UML:Dependency.supplier>
                <UML:Package xmi.idref = 'I5e1f0371m103888fb12amm6764'/>
              </UML:Dependency.supplier>
            </UML:Dependency>
          </UML:Namespace.ownedElement>
        </UML:Package>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm369a' name = 'process'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Classifier</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:TagDefinition xmi.id = 'Im2d596f98m10363d93b95mm3694' name = 'gentleware-initialValue'
          isSpecification = 'false'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = 'Im2d596f98m10363d93b95mm3696'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = 'Im2d596f98m10363d93b95mm3698' lower = '1'
                  upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm3692' name = 'Observable'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm3690' name = 'postcondition'
          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Constraint</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm368e' name = 'invariant'
          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Constraint</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm368c' name = 'realize'
          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Abstraction</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm368a' name = 'ValueObject'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm3688' name = 'Observer'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm3686' name = 'subscribe'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Association</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:TagDefinition xmi.id = 'Im2d596f98m10363d93b95mm3680' name = 'transient'
          isSpecification = 'false'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = 'Im2d596f98m10363d93b95mm3682'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = 'Im2d596f98m10363d93b95mm3684' lower = '1'
                  upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm367e' name = 'Socket'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Package xmi.id = 'Im2d596f98m10363d93b95mm3668' name = 'ocl' visibility = 'public'
          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Namespace.ownedElement>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm367c' name = 'String' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm367a' name = 'OclAny' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm3678' name = 'Bag' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm3676' name = 'Collection'
              visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
              isAbstract = 'false'/>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm3674' name = 'Integer' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm3672' name = 'Real' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm3670' name = 'Sequence'
              visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
              isAbstract = 'false'/>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm366e' name = 'Set' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm366c' name = 'Boolean' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
            <UML:DataType xmi.id = 'Im2d596f98m10363d93b95mm366a' name = 'OclType' visibility = 'public'
              isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
          </UML:Namespace.ownedElement>
        </UML:Package>
        <UML:Stereotype xmi.id = 'Im2d596f98m10363d93b95mm3666' name = 'create'
          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
        <UML:Stereotype xmi.id = 'Im160e6027m10364dd6223mm69ae' name = 'Singleton'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'I47da90f2m1037dab50c8mm6caa' name = 'accessor'
          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Dependency</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:TagDefinition xmi.id = 'I47da90f2m1037dab50c8mm6c7d' name = 'documentation'
          isSpecification = 'false'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = 'I47da90f2m1037dab50c8mm6c7c'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = 'I47da90f2m1037dab50c8mm6c7b' lower = '1'
                  upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:Package xmi.id = 'I5e1f0371m103888fb12amm68ad' name = 'com' visibility = 'public'
          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Namespace.ownedElement>
            <UML:Package xmi.id = 'I5e1f0371m103888fb12amm68ac' name = 'jabberwookie'
              visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
              isAbstract = 'false'>
              <UML:Namespace.ownedElement>
                <UML:Class xmi.id = 'I5e1f0371m103888fb12amm67ab' name = 'Client2Server'
                  visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
                  isAbstract = 'false' isActive = 'false'>
                  <UML:ModelElement.clientDependency>
                    <UML:Dependency xmi.idref = 'I6e742d0m1039cde3951mm661d'/>
                    <UML:Dependency xmi.idref = 'I6e742d0m1039cde3951mm6604'/>
                    <UML:Dependency xmi.idref = 'I6e742d0m1039cde3951mm65eb'/>
                  </UML:ModelElement.clientDependency>
                </UML:Class>
                <UML:Package xmi.id = 'I5e1f0371m103888fb12amm6589' name = 'ns' visibility = 'public'
                  isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
                  <UML:Namespace.ownedElement>
                    <UML:Package xmi.id = 'I5e1f0371m103888fb12amm6588' name = 'jabber' visibility = 'public'
                      isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
                      <UML:Namespace.ownedElement>
                        <UML:Class xmi.id = 'Im7dc8534am10389aee3admm6851' name = 'Presence' visibility = 'public'
                          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'
                          isActive = 'false'/>
                        <UML:Class xmi.id = 'Im7dc8534am10389aee3admm6850' name = 'Message' visibility = 'public'
                          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'
                          isActive = 'false'/>
                        <UML:Class xmi.id = 'I6e742d0m1039cde3951mm65cc' name = 'IQ' visibility = 'public'
                          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'
                          isActive = 'false'/>
                        <UML:Package xmi.id = 'I742480e1m1040f4c9758mm7bf6' name = 'iq' visibility = 'public'
                          isSpecification = 'false' isRoot = 'false' isLeaf = 'false' isAbstract = 'false'/>
                        <UML:Dependency xmi.id = 'I742480e1m1040f4c9758mm7bd1' isSpecification = 'false'>
                          <UML:Dependency.client>
                            <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
                          </UML:Dependency.client>
                          <UML:Dependency.supplier>
                            <UML:Package xmi.idref = 'I742480e1m1040f4c9758mm7bf6'/>
                          </UML:Dependency.supplier>
                        </UML:Dependency>
                      </UML:Namespace.ownedElement>
                    </UML:Package>
                    <UML:Dependency xmi.id = 'Im7dc8534am10389aee3admm688e' isSpecification = 'false'>
                      <UML:Dependency.client>
                        <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
                      </UML:Dependency.client>
                      <UML:Dependency.supplier>
                        <UML:Package xmi.idref = 'I5e1f0371m103888fb12amm6588'/>
                      </UML:Dependency.supplier>
                    </UML:Dependency>
                  </UML:Namespace.ownedElement>
                </UML:Package>
                <UML:Interface xmi.id = 'I6e742d0m1039cde3951mm6674' name = 'MessageListener'
                  visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
                  isAbstract = 'false'/>
                <UML:Interface xmi.id = 'I6e742d0m1039cde3951mm6690' name = 'IQListener'
                  visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
                  isAbstract = 'false'/>
                <UML:Interface xmi.id = 'I6e742d0m1039cde3951mm6682' name = 'PresenceListener'
                  visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
                  isAbstract = 'false'/>
                <UML:Dependency xmi.id = 'I6e742d0m1039cde3951mm661d' isSpecification = 'false'>
                  <UML:ModelElement.stereotype>
                    <UML:Stereotype xmi.idref = 'I6e742d0m1039cde3951mm661e'/>
                  </UML:ModelElement.stereotype>
                  <UML:Dependency.client>
                    <UML:Class xmi.idref = 'I5e1f0371m103888fb12amm67ab'/>
                  </UML:Dependency.client>
                  <UML:Dependency.supplier>
                    <UML:Interface xmi.idref = 'I6e742d0m1039cde3951mm6674'/>
                  </UML:Dependency.supplier>
                </UML:Dependency>
                <UML:Dependency xmi.id = 'I6e742d0m1039cde3951mm6604' isSpecification = 'false'>
                  <UML:ModelElement.stereotype>
                    <UML:Stereotype xmi.idref = 'I6e742d0m1039cde3951mm661e'/>
                  </UML:ModelElement.stereotype>
                  <UML:Dependency.client>
                    <UML:Class xmi.idref = 'I5e1f0371m103888fb12amm67ab'/>
                  </UML:Dependency.client>
                  <UML:Dependency.supplier>
                    <UML:Interface xmi.idref = 'I6e742d0m1039cde3951mm6690'/>
                  </UML:Dependency.supplier>
                </UML:Dependency>
                <UML:Dependency xmi.id = 'I6e742d0m1039cde3951mm65eb' isSpecification = 'false'>
                  <UML:ModelElement.stereotype>
                    <UML:Stereotype xmi.idref = 'I6e742d0m1039cde3951mm661e'/>
                  </UML:ModelElement.stereotype>
                  <UML:Dependency.client>
                    <UML:Class xmi.idref = 'I5e1f0371m103888fb12amm67ab'/>
                  </UML:Dependency.client>
                  <UML:Dependency.supplier>
                    <UML:Interface xmi.idref = 'I6e742d0m1039cde3951mm6682'/>
                  </UML:Dependency.supplier>
                </UML:Dependency>
              </UML:Namespace.ownedElement>
            </UML:Package>
            <UML:Dependency xmi.id = 'I5e1f0371m103888fb12amm66f2' isSpecification = 'false'>
              <UML:Dependency.client>
                <UML:Class xmi.idref = 'Im2d596f98m10363d93b95mm378c'/>
              </UML:Dependency.client>
              <UML:Dependency.supplier>
                <UML:Package xmi.idref = 'I5e1f0371m103888fb12amm68ac'/>
              </UML:Dependency.supplier>
            </UML:Dependency>
          </UML:Namespace.ownedElement>
        </UML:Package>
        <UML:Stereotype xmi.id = 'Im1bbfb4f3m10392da3951mm68aa' name = 'exception'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Classifier</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'I694706b7m1039ca3fd82mm6754' name = 'initializer'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Operation</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'I6e742d0m1039cde3951mm661e' name = 'use' isSpecification = 'false'
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false'>
          <UML:Stereotype.baseClass>Dependency</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Stereotype xmi.id = 'Im2cb8f81bm103a15f60fdmm66e7' name = 'Applet'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Class</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:TagDefinition xmi.id = 'Im2cb8f81bm103a15f60fdmm6587' name = 'AppletInfo'
          isSpecification = 'false'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = 'Im2cb8f81bm103a15f60fdmm6586'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = 'Im2cb8f81bm103a15f60fdmm6585' lower = '1'
                  upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:TagDefinition xmi.id = 'Im2cb8f81bm103a15f60fdmm6583' name = 'ParameterInfo'
          isSpecification = 'false'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = 'Im2cb8f81bm103a15f60fdmm6582'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = 'Im2cb8f81bm103a15f60fdmm6581' lower = '1'
                  upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
        <UML:Stereotype xmi.id = 'Im2040183cm103a707e832mm4551' name = 'instantiates'
          visibility = 'public' isSpecification = 'false' isRoot = 'false' isLeaf = 'false'
          isAbstract = 'false'>
          <UML:Stereotype.baseClass>Dependency</UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:TagDefinition xmi.id = 'I3e6530b3m103c0640dacmm543e' name = 'final'
          isSpecification = 'false'>
          <UML:TagDefinition.multiplicity>
            <UML:Multiplicity xmi.id = 'I3e6530b3m103c0640dacmm543d'>
              <UML:Multiplicity.range>
                <UML:MultiplicityRange xmi.id = 'I3e6530b3m103c0640dacmm543c' lower = '1'
                  upper = '1'/>
              </UML:Multiplicity.range>
            </UML:Multiplicity>
          </UML:TagDefinition.multiplicity>
        </UML:TagDefinition>
      </UML:Namespace.ownedElement>
    </UML:Model>
  </XMI.content>
</XMI>
