-- $Id$
module Process;

create APPLET : APPLETM from SINGLETON : SINGLETONM, JAVATYPES : MERGEMODEL;

-- ======================================================================
-- model merge helpers begin
-- ======================================================================
-- From: ModelMerge.atl 1174 2005-05-23 07:38:38Z dwagelaa

helper context SINGLETONM!ModelElement def : isInPackage() : Boolean =
	not SINGLETONM!Package.allInstances()->select(p|
		p=self.namespace and p.oclIsTypeOf(SINGLETONM!Package))->isEmpty();

helper context SINGLETONM!ModelElement def : qName() : String =
	if self.isInPackage() then
		self.namespace.qName() + '.' + self.name
	else
		self.name
	endif;

helper context MERGEMODEL!ModelElement def : isInPackage() : Boolean =
	not MERGEMODEL!Package.allInstances()->select(p|
		p=self.namespace and p.oclIsTypeOf(MERGEMODEL!Package))->isEmpty();

helper context MERGEMODEL!ModelElement def : qName() : String =
	if self.isInPackage() then
		self.namespace.qName() + '.' + self.name
	else
		self.name
	endif;

helper context MERGEMODEL!Model def : notInSourceModel() : Boolean =
	false;

helper context MERGEMODEL!Model def : fromSourceModel() : SINGLETONM!Model =
	SINGLETONM!Model.allInstances()->asSequence()->first();

helper context MERGEMODEL!Classifier def : notInSourceModel() : Boolean =
	SINGLETONM!Classifier.allInstances()->select(e|e.qName()=self.qName())->isEmpty();

helper context MERGEMODEL!Classifier def : fromSourceModel() : SINGLETONM!Classifier =
	SINGLETONM!Classifier.allInstances()->select(e|e.qName()=self.qName())->first();

helper context MERGEMODEL!Package def : notInSourceModel() : Boolean =
	SINGLETONM!Package.allInstances()->select(e|e.qName()=self.qName())->isEmpty();

helper context MERGEMODEL!Package def : fromSourceModel() : SINGLETONM!Package =
	SINGLETONM!Package.allInstances()->select(e|e.qName()=self.qName())->first();

helper context MERGEMODEL!TagDefinition def : notInSourceModel() : Boolean =
	SINGLETONM!TagDefinition.allInstances()->select(e|e.qName()=self.qName())->isEmpty();

helper context MERGEMODEL!TagDefinition def : fromSourceModel() : SINGLETONM!TagDefinition =
	SINGLETONM!TagDefinition.allInstances()->select(e|e.qName()=self.qName())->first();

helper context MERGEMODEL!Stereotype def : notInSourceModel() : Boolean =
	SINGLETONM!Stereotype.allInstances()->select(e|e.qName()=self.qName())->isEmpty();

helper context MERGEMODEL!Stereotype def : fromSourceModel() : SINGLETONM!Stereotype =
	SINGLETONM!Stereotype.allInstances()->select(e|e.qName()=self.qName())->first();

helper context MERGEMODEL!Association def : notInSourceModel() : Boolean =
	not self.connection->forAll(c|c.inSourceModel());

helper context MERGEMODEL!AssociationEnd def : inSourceModel() : Boolean =
	if self.isNavigable then
		not SINGLETONM!AssociationEnd.allInstances()->select(e|e.isNavigable)->select(e|
			e.name=self.name and e.participant.qName()=self.participant.qName())->isEmpty()
	else if self.otherEnd().isNavigable then
		self.otherEnd().inSourceModel()
	else
		true
	endif endif;

helper context MERGEMODEL!AssociationEnd def : notInSourceModel() : Boolean =
	self.association.notInSourceModel();

helper context MERGEMODEL!AssociationEnd def : otherEnd() : MERGEMODEL!AssociationEnd =
	self.association.connection->select(x|x<>self)->first();

helper context MERGEMODEL!TaggedValue def : notInSourceModel() : Boolean =
	self.modelElement.notInSourceModel();

helper context MERGEMODEL!Feature def : notInSourceModel() : Boolean =
	self.owner.notInSourceModel();

helper context MERGEMODEL!Expression def : notInSourceModel() : Boolean =
	if not MERGEMODEL!Attribute.allInstances()->select(a|a.initialValue=self)->isEmpty() then
		MERGEMODEL!Attribute.allInstances()->select(a|a.initialValue=self)->first().notInSourceModel()
	else if	not MERGEMODEL!Method.allInstances()->select(m|m.body=self)->isEmpty() then
		MERGEMODEL!Method.allInstances()->select(m|m.body=self)->first().notInSourceModel()
	else
		false
	endif endif;

helper context MERGEMODEL!Dependency def : notInSourceModel() : Boolean =
	SINGLETONM!Dependency.allInstances()->select(d|
		d.supplier->forAll(s1|self.supplier->forAll(s2|s1.qName()=s2.qName())) and
		d.client->forAll(c1|self.client->forAll(c2|c1.qName()=c2.qName())))->isEmpty();

helper context MERGEMODEL!Generalization def : notInSourceModel() : Boolean =
	SINGLETONM!Generalization.allInstances()->select(g|
		g.parent.qName()=self.parent.qName() and
		g.child.qName()=self.child.qName())->isEmpty();

helper context MERGEMODEL!Multiplicity def : notInSourceModel() : Boolean =
	if not MERGEMODEL!StructuralFeature.allInstances()->select(e|e.multiplicity=self)->isEmpty() then
		MERGEMODEL!StructuralFeature.allInstances()->select(e|e.multiplicity=self)->first().notInSourceModel()
	else if	not MERGEMODEL!AssociationEnd.allInstances()->select(e|e.multiplicity=self)->isEmpty() then
		MERGEMODEL!AssociationEnd.allInstances()->select(e|e.multiplicity=self)->first().notInSourceModel()
	else if	not MERGEMODEL!TagDefinition.allInstances()->select(e|e.multiplicity=self)->isEmpty() then
		MERGEMODEL!TagDefinition.allInstances()->select(e|e.multiplicity=self)->first().notInSourceModel()
	else
		false
	endif endif endif;

helper context MERGEMODEL!MultiplicityRange def : notInSourceModel() : Boolean =
	self.multiplicity.notInSourceModel();

helper context MERGEMODEL!Parameter def : notInSourceModel() : Boolean =
	self.behavioralFeature.notInSourceModel();

-- ======================================================================
-- model merge helpers end
-- ======================================================================

-- ======================================================================
-- model-specific helpers begin
-- ======================================================================

helper context String def : qClass() : SINGLETONM!Class =
	SINGLETONM!Class.allInstances()->select(c|c.qName()=self)->first();

helper context String def : mergeQClass() : MERGEMODEL!Class =
	MERGEMODEL!Class.allInstances()->select(c|c.qName()=self)->first();

helper context String def : hasQClass() : Boolean =
	not SINGLETONM!Class.allInstances()->select(c|c.qName()=self)->isEmpty();

helper context SINGLETONM!GeneralizableElement def : isProcessType() : Boolean =
	not self.stereotype->select(s|s.name='process')->isEmpty();

helper context SINGLETONM!GeneralizableElement def : isSingleton() : Boolean =
	not self.stereotype->select(s|s.name='Singleton')->isEmpty();

helper context SINGLETONM!GeneralizableElement def : mainBody() : String =
	if self.isSingleton() then
		if self.hasNoInitOperation() then
			'getInstance();'
		else
			'getInstance().init();'
		endif
	else
		'new ' + self.name + '();'
	endif;

helper context SINGLETONM!Feature def : isInitOperation() : Boolean =
	self.name='init' and self.oclIsKindOf(SINGLETONM!Operation);

helper context SINGLETONM!Classifier def : hasNoInitOperation() : Boolean =
	self.feature->select(f|f.isInitOperation())->isEmpty();

-- ======================================================================
-- model-specific helpers end
-- ======================================================================

-- ======================================================================
-- non-mapsTo rules begin
-- ======================================================================

rule ProcessClass {
	from s : SINGLETONM!Class (s.isProcessType())
	to op : APPLETM!Operation (
	   	name <- 'main',
		owner <- s,
		visibility <- #vk_public,
		ownerScope <- #sk_classifier,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   args : APPLETM!Parameter (
	   	name <- 'args',
		behavioralFeature <- op,
		type <- if 'java.lang.String[]'.hasQClass()
			then 'java.lang.String[]'.qClass()
			else 'java.lang.String[]'.mergeQClass() endif,
		kind <- #pdk_in),
	   mbody : APPLETM!ProcedureExpression (
	   	language <- 'java',
		body <- s.mainBody()),
	   meth : APPLETM!Method (
	   	owner <- s,
		body <- mbody,
		specification <- op)
}

-- ======================================================================
-- non-mapsTo rules end
-- ======================================================================

-- ======================================================================
-- model merge begin
-- ======================================================================
-- From: ModelMerge.atl 1174 2005-05-23 07:38:38Z dwagelaa

rule MergeAssociation {
    from s : MERGEMODEL!Association (s.oclIsTypeOf(MERGEMODEL!Association) and
    	s.notInSourceModel())
    to t : APPLETM!Association mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        generalization <- s.generalization,
        comment <- s.comment,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        connection <- s.connection,
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeTaggedValue {
    from s : MERGEMODEL!TaggedValue (s.notInSourceModel())
    to t : APPLETM!TaggedValue mapsTo s (
        dataValue <- s.dataValue,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        referenceValue <- s.referenceValue,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
        type <- if s.type.notInSourceModel()
			then s.type
			else s.type.fromSourceModel() endif)
}

rule MergeOperation {
    from s : MERGEMODEL!Operation (s.notInSourceModel())
    to t : APPLETM!Operation mapsTo s (
        ownerScope <- s.ownerScope,
        visibility <- s.visibility,
        isQuery <- s.isQuery,
        isAbstract <- s.isAbstract,
        concurrency <- s.concurrency,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        isLeaf <- s.isLeaf,
        specification <- s.specification,
        templateParameter <- s.templateParameter,
        parameter <- s.parameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow)
}

rule MergeProcedureExpression {
    from s : MERGEMODEL!ProcedureExpression (s.notInSourceModel())
    to t : APPLETM!ProcedureExpression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule MergeAbstraction {
    from s : MERGEMODEL!Abstraction (s.notInSourceModel())
    to t : APPLETM!Abstraction mapsTo s (
        mapping <- s.mapping,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        client <- s.client->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        supplier <- s.supplier->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeMultiplicity {
    from s : MERGEMODEL!Multiplicity (s.notInSourceModel())
    to t : APPLETM!Multiplicity mapsTo s (
        range <- s.range)
}

rule MergeParameter {
    from s : MERGEMODEL!Parameter (s.notInSourceModel())
    to t : APPLETM!Parameter mapsTo s (
        kind <- s.kind,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        defaultValue <- s.defaultValue,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        type <- if s.type.notInSourceModel()
			then s.type
			else s.type.fromSourceModel() endif,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow)
}

rule MergeClass {
    from s : MERGEMODEL!Class (s.oclIsTypeOf(MERGEMODEL!Class) and
    	s.notInSourceModel())
    to t : APPLETM!Class mapsTo s (
        isRoot <- s.isRoot,
        isActive <- s.isActive,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        generalization <- s.generalization,
        comment <- s.comment,
        powertypeRange <- s.powertypeRange,
        feature <- s.feature,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeInterface {
    from s : MERGEMODEL!Interface (s.notInSourceModel())
    to t : APPLETM!Interface mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        generalization <- s.generalization,
        comment <- s.comment,
        powertypeRange <- s.powertypeRange,
        feature <- s.feature,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeMultiplicityRange {
    from s : MERGEMODEL!MultiplicityRange (s.notInSourceModel())
    to t : APPLETM!MultiplicityRange mapsTo s (
        upper <- s.upper,
        lower <- s.lower)
}

rule MergeExpression {
    from s : MERGEMODEL!Expression (s.oclIsTypeOf(MERGEMODEL!Expression) and
    	s.notInSourceModel())
    to t : APPLETM!Expression mapsTo s (
        language <- s.language,
        body <- s.body)
}

rule MergeDataType {
    from s : MERGEMODEL!DataType (s.oclIsTypeOf(MERGEMODEL!DataType) and
    	s.notInSourceModel())
    to t : APPLETM!DataType mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        generalization <- s.generalization,
        comment <- s.comment,
        powertypeRange <- s.powertypeRange,
        feature <- s.feature,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergePackage {
    from s : MERGEMODEL!Package (s.oclIsTypeOf(MERGEMODEL!Package) and
    	s.notInSourceModel())
    to t : APPLETM!Package mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        generalization <- s.generalization,
        comment <- s.comment,
        elementImport <- s.elementImport,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeAssociationEnd {
    from s : MERGEMODEL!AssociationEnd (s.oclIsTypeOf(MERGEMODEL!AssociationEnd) and
    	s.notInSourceModel())
    to t : APPLETM!AssociationEnd mapsTo s (
        targetScope <- s.targetScope,
        isNavigable <- s.isNavigable,
        ordering <- s.ordering,
        changeability <- s.changeability,
        multiplicity <- s.multiplicity,
        aggregation <- s.aggregation,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        qualifier <- s.qualifier,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        participant <- if s.participant.notInSourceModel()
			then s.participant
			else s.participant.fromSourceModel() endif,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        constraint <- s.constraint,
        specification <- s.specification,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow)
}

rule MergeAttribute {
    from s : MERGEMODEL!Attribute (s.notInSourceModel())
    to t : APPLETM!Attribute mapsTo s (
        targetScope <- s.targetScope,
        initialValue <- s.initialValue,
        ownerScope <- s.ownerScope,
        visibility <- s.visibility,
        changeability <- s.changeability,
        ordering <- s.ordering,
        name <- s.name,
        isSpecification <- s.isSpecification,
        multiplicity <- s.multiplicity,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        type <- if s.type.notInSourceModel()
			then s.type
			else s.type.fromSourceModel() endif,
        sourceFlow <- s.sourceFlow)
}

rule MergeGeneralization {
    from s : MERGEMODEL!Generalization (s.notInSourceModel())
    to t : APPLETM!Generalization mapsTo s (
        discriminator <- s.discriminator,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        powertype <- s.powertype,
        parent <- if s.parent.notInSourceModel()
			then s.parent
			else s.parent.fromSourceModel() endif,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        child <- if s.child.notInSourceModel()
			then s.child
			else s.child.fromSourceModel() endif,
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeDependency {
    from s : MERGEMODEL!Dependency (s.oclIsTypeOf(MERGEMODEL!Dependency) and
    	s.notInSourceModel())
    to t : APPLETM!Dependency mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        client <- s.client->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        supplier <- s.supplier->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeTagDefinition {
    from s : MERGEMODEL!TagDefinition (s.notInSourceModel())
    to t : APPLETM!TagDefinition mapsTo s (
        tagType <- s.tagType,
        multiplicity <- s.multiplicity,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeStereotype {
    from s : MERGEMODEL!Stereotype (s.notInSourceModel())
    to t : APPLETM!Stereotype mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        baseClass <- s.baseClass,
        visibility <- s.visibility,
        name <- s.name,
        icon <- s.icon,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        templateParameter <- s.templateParameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        generalization <- s.generalization,
        comment <- s.comment,
        definedTag <- s.definedTag,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow,
        stereotypeConstraint <- s.stereotypeConstraint,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeMethod {
    from s : MERGEMODEL!Method (s.notInSourceModel())
    to t : APPLETM!Method mapsTo s (
        body <- s.body,
        ownerScope <- s.ownerScope,
        visibility <- s.visibility,
        isQuery <- s.isQuery,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        parameter <- s.parameter,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        comment <- s.comment,
        specification <- s.specification,
        constraint <- s.constraint,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
        sourceFlow <- s.sourceFlow)
}

rule MergeException {
    from s : MERGEMODEL!Exception (s.notInSourceModel())
    to t : APPLETM!Exception mapsTo s (
        isRoot <- s.isRoot,
        name <- s.name,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        taggedValue <- s.taggedValue,
        sourceFlow <- s.sourceFlow,
        targetFlow <- s.targetFlow,
        clientDependency <- s.clientDependency,
        powertypeRange <- s.powertypeRange,
        "context" <- s."context",
        ownedElement <- s.ownedElement,
        templateParameter <- s.templateParameter,
        constraint <- s.constraint,
        feature <- s.feature,
        stereotype <- s.stereotype->collect(e|if e.notInSourceModel()
        	then e else e.fromSourceModel() endif),
        generalization <- s.generalization,
        comment <- s.comment,
		namespace <- if s.namespace.notInSourceModel()
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

-- ======================================================================
-- model merge end
-- ======================================================================

-- ======================================================================
-- model copy begin
-- ======================================================================
-- Generated by: ModelCopyGenerator.atl 1515 2005-06-15 14:41:07Z dwagelaa $

rule UseCase {
    from s : SINGLETONM!UseCase
    to t : APPLETM!UseCase mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        feature <- s.feature,
        extend <- s.extend,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        include <- s.include,
        powertypeRange <- s.powertypeRange,
        clientDependency <- s.clientDependency,
        extensionPoint <- s.extensionPoint,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule AssociationEnd {
    from s : SINGLETONM!AssociationEnd (s.oclIsTypeOf(SINGLETONM!AssociationEnd))
    to t : APPLETM!AssociationEnd mapsTo s (
        multiplicity <- s.multiplicity,
        aggregation <- s.aggregation,
        visibility <- s.visibility,
        targetScope <- s.targetScope,
        changeability <- s.changeability,
        name <- s.name,
        isSpecification <- s.isSpecification,
        ordering <- s.ordering,
        isNavigable <- s.isNavigable,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        qualifier <- s.qualifier,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        specification <- s.specification,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        participant <- s.participant,
        sourceFlow <- s.sourceFlow)
}

rule Actor {
    from s : SINGLETONM!Actor
    to t : APPLETM!Actor mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        powertypeRange <- s.powertypeRange,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Interface {
    from s : SINGLETONM!Interface
    to t : APPLETM!Interface mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        powertypeRange <- s.powertypeRange,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Stereotype {
    from s : SINGLETONM!Stereotype
    to t : APPLETM!Stereotype mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        baseClass <- s.baseClass,
        icon <- s.icon,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        stereotypeConstraint <- s.stereotypeConstraint,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        definedTag <- s.definedTag,
        sourceFlow <- s.sourceFlow)
}

rule Dependency {
    from s : SINGLETONM!Dependency (s.oclIsTypeOf(SINGLETONM!Dependency))
    to t : APPLETM!Dependency mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        client <- s.client,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        supplier <- s.supplier,
        sourceFlow <- s.sourceFlow)
}

rule Association {
    from s : SINGLETONM!Association (s.oclIsTypeOf(SINGLETONM!Association))
    to t : APPLETM!Association mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        connection <- s.connection,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Collaboration {
    from s : SINGLETONM!Collaboration
    to t : APPLETM!Collaboration mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        representedOperation <- s.representedOperation,
        constrainingElement <- s.constrainingElement,
        usedCollaboration <- s.usedCollaboration,
        representedClassifier <- s.representedClassifier,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow,
        interaction <- s.interaction)
}

rule Message {
    from s : SINGLETONM!Message
    to t : APPLETM!Message mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        conformingStimulus <- s.conformingStimulus,
        comment <- s.comment,
        action <- s.action,
        receiver <- s.receiver,
        sender <- s.sender,
        taggedValue <- s.taggedValue,
        predecessor <- s.predecessor,
        clientDependency <- s.clientDependency,
        communicationConnection <- s.communicationConnection,
        activator <- s.activator,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Include {
    from s : SINGLETONM!Include
    to t : APPLETM!Include mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        base <- s.base,
        clientDependency <- s.clientDependency,
        addition <- s.addition,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule DataType {
    from s : SINGLETONM!DataType (s.oclIsTypeOf(SINGLETONM!DataType))
    to t : APPLETM!DataType mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        powertypeRange <- s.powertypeRange,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Operation {
    from s : SINGLETONM!Operation
    to t : APPLETM!Operation mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        specification <- s.specification,
        name <- s.name,
        isQuery <- s.isQuery,
        isSpecification <- s.isSpecification,
        ownerScope <- s.ownerScope,
        concurrency <- s.concurrency,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        parameter <- s.parameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule CollaborationInstanceSet {
    from s : SINGLETONM!CollaborationInstanceSet
    to t : APPLETM!CollaborationInstanceSet mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        interactionInstanceSet <- s.interactionInstanceSet,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        participatingLink <- s.participatingLink,
        collaboration <- s.collaboration,
        constrainingElement <- s.constrainingElement,
        taggedValue <- s.taggedValue,
        participatingInstance <- s.participatingInstance,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Parameter {
    from s : SINGLETONM!Parameter
    to t : APPLETM!Parameter mapsTo s (
        visibility <- s.visibility,
        kind <- s.kind,
        defaultValue <- s.defaultValue,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        type <- s.type,
        sourceFlow <- s.sourceFlow)
}

rule Pseudostate {
    from s : SINGLETONM!Pseudostate
    to t : APPLETM!Pseudostate mapsTo s (
        visibility <- s.visibility,
        kind <- s.kind,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        incoming <- s.incoming,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        outgoing <- s.outgoing,
        sourceFlow <- s.sourceFlow)
}

rule Class {
    from s : SINGLETONM!Class (s.oclIsTypeOf(SINGLETONM!Class))
    to t : APPLETM!Class mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        isActive <- s.isActive,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        powertypeRange <- s.powertypeRange,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Expression {
    from s : SINGLETONM!Expression (s.oclIsTypeOf(SINGLETONM!Expression))
    to t : APPLETM!Expression mapsTo s (
        body <- s.body,
        language <- s.language)
}

rule ProcedureExpression {
    from s : SINGLETONM!ProcedureExpression
    to t : APPLETM!ProcedureExpression mapsTo s (
        body <- s.body,
        language <- s.language)
}

rule CallEvent {
    from s : SINGLETONM!CallEvent
    to t : APPLETM!CallEvent mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        operation <- s.operation,
        parameter <- s.parameter,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule MultiplicityRange {
    from s : SINGLETONM!MultiplicityRange
    to t : APPLETM!MultiplicityRange mapsTo s (
        upper <- s.upper,
        lower <- s.lower)
}

rule StateMachine {
    from s : SINGLETONM!StateMachine (s.oclIsTypeOf(SINGLETONM!StateMachine))
    to t : APPLETM!StateMachine mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        submachineState <- s.submachineState,
        comment <- s.comment,
        top <- s.top,
        taggedValue <- s.taggedValue,
        transitions <- s.transitions,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule CallAction {
    from s : SINGLETONM!CallAction
    to t : APPLETM!CallAction mapsTo s (
        script <- s.script,
        target <- s.target,
        visibility <- s.visibility,
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        isSpecification <- s.isSpecification,
        recurrence <- s.recurrence,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        actualArgument <- s.actualArgument,
        operation <- s.operation,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Package {
    from s : SINGLETONM!Package (s.oclIsTypeOf(SINGLETONM!Package))
    to t : APPLETM!Package mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        elementImport <- s.elementImport,
        comment <- s.comment,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Abstraction {
    from s : SINGLETONM!Abstraction
    to t : APPLETM!Abstraction mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        mapping <- s.mapping,
        templateParameter <- s.templateParameter,
        client <- s.client,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        supplier <- s.supplier,
        sourceFlow <- s.sourceFlow)
}

rule BooleanExpression {
    from s : SINGLETONM!BooleanExpression
    to t : APPLETM!BooleanExpression mapsTo s (
        body <- s.body,
        language <- s.language)
}

rule ReturnAction {
    from s : SINGLETONM!ReturnAction
    to t : APPLETM!ReturnAction mapsTo s (
        script <- s.script,
        target <- s.target,
        visibility <- s.visibility,
        isAsynchronous <- s.isAsynchronous,
        name <- s.name,
        isSpecification <- s.isSpecification,
        recurrence <- s.recurrence,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        actualArgument <- s.actualArgument,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Argument {
    from s : SINGLETONM!Argument
    to t : APPLETM!Argument mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        value <- s.value,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule InteractionInstanceSet {
    from s : SINGLETONM!InteractionInstanceSet
    to t : APPLETM!InteractionInstanceSet mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        interaction <- s.interaction,
        clientDependency <- s.clientDependency,
        participatingStimulus <- s.participatingStimulus,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule LinkEnd {
    from s : SINGLETONM!LinkEnd
    to t : APPLETM!LinkEnd mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        instance <- s.instance,
        taggedValue <- s.taggedValue,
        qualifiedValue <- s.qualifiedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        associationEnd <- s.associationEnd,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule TaggedValue {
    from s : SINGLETONM!TaggedValue
    to t : APPLETM!TaggedValue mapsTo s (
        dataValue <- s.dataValue,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        type <- s.type,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        referenceValue <- s.referenceValue,
        sourceFlow <- s.sourceFlow)
}

rule SimpleState {
    from s : SINGLETONM!SimpleState (s.oclIsTypeOf(SINGLETONM!SimpleState))
    to t : APPLETM!SimpleState mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        entry <- s.entry,
        deferrableEvent <- s.deferrableEvent,
        taggedValue <- s.taggedValue,
        incoming <- s.incoming,
        clientDependency <- s.clientDependency,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        exit <- s.exit,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        outgoing <- s.outgoing,
        internalTransition <- s.internalTransition,
        sourceFlow <- s.sourceFlow)
}

rule Generalization {
    from s : SINGLETONM!Generalization
    to t : APPLETM!Generalization mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        discriminator <- s.discriminator,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        child <- s.child,
        taggedValue <- s.taggedValue,
        powertype <- s.powertype,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        parent <- s.parent,
        sourceFlow <- s.sourceFlow)
}

rule Multiplicity {
    from s : SINGLETONM!Multiplicity
    to t : APPLETM!Multiplicity mapsTo s (
        range <- s.range)
}

rule Object {
    from s : SINGLETONM!Object (s.oclIsTypeOf(SINGLETONM!Object))
    to t : APPLETM!Object mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        ownedLink <- s.ownedLink,
        classifier <- s.classifier,
        slot <- s.slot,
        taggedValue <- s.taggedValue,
        linkEnd <- s.linkEnd,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        ownedInstance <- s.ownedInstance,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        componentInstance <- s.componentInstance,
        sourceFlow <- s.sourceFlow)
}

rule TagDefinition {
    from s : SINGLETONM!TagDefinition
    to t : APPLETM!TagDefinition mapsTo s (
        multiplicity <- s.multiplicity,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        tagType <- s.tagType,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Model {
    from s : SINGLETONM!Model
    to t : APPLETM!Model mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        elementImport <- s.elementImport,
        comment <- s.comment,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Exception {
    from s : SINGLETONM!Exception
    to t : APPLETM!Exception mapsTo s (
        isLeaf <- s.isLeaf,
        isRoot <- s.isRoot,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isAbstract <- s.isAbstract,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        "context" <- s."context",
        feature <- s.feature,
        ownedElement <- s.ownedElement,
        taggedValue <- s.taggedValue,
        powertypeRange <- s.powertypeRange,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        generalization <- s.generalization,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Transition {
    from s : SINGLETONM!Transition
    to t : APPLETM!Transition mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        guard <- s.guard,
        comment <- s.comment,
        trigger <- s.trigger,
        target <- s.target,
        effect <- s.effect,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        source <- s.source,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Link {
    from s : SINGLETONM!Link (s.oclIsTypeOf(SINGLETONM!Link))
    to t : APPLETM!Link mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        association <- s.association,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        connection <- s.connection,
        sourceFlow <- s.sourceFlow)
}

rule CompositeState {
    from s : SINGLETONM!CompositeState (s.oclIsTypeOf(SINGLETONM!CompositeState))
    to t : APPLETM!CompositeState mapsTo s (
        isConcurrent <- s.isConcurrent,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        entry <- s.entry,
        deferrableEvent <- s.deferrableEvent,
        taggedValue <- s.taggedValue,
        incoming <- s.incoming,
        clientDependency <- s.clientDependency,
        doActivity <- s.doActivity,
        constraint <- s.constraint,
        exit <- s.exit,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        subvertex <- s.subvertex,
        outgoing <- s.outgoing,
        internalTransition <- s.internalTransition,
        sourceFlow <- s.sourceFlow)
}

rule Attribute {
    from s : SINGLETONM!Attribute
    to t : APPLETM!Attribute mapsTo s (
        ordering <- s.ordering,
        initialValue <- s.initialValue,
        changeability <- s.changeability,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        ownerScope <- s.ownerScope,
        multiplicity <- s.multiplicity,
        targetScope <- s.targetScope,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        type <- s.type,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Stimulus {
    from s : SINGLETONM!Stimulus
    to t : APPLETM!Stimulus mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        receiver <- s.receiver,
        sender <- s.sender,
        taggedValue <- s.taggedValue,
        dispatchAction <- s.dispatchAction,
        communicationLink <- s.communicationLink,
        clientDependency <- s.clientDependency,
        argument <- s.argument,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Guard {
    from s : SINGLETONM!Guard
    to t : APPLETM!Guard mapsTo s (
        expression <- s.expression,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

rule Method {
    from s : SINGLETONM!Method
    to t : APPLETM!Method mapsTo s (
        body <- s.body,
        visibility <- s.visibility,
        name <- s.name,
        isQuery <- s.isQuery,
        isSpecification <- s.isSpecification,
        ownerScope <- s.ownerScope,
        templateParameter <- s.templateParameter,
        parameter <- s.parameter,
        comment <- s.comment,
        taggedValue <- s.taggedValue,
        specification <- s.specification,
        clientDependency <- s.clientDependency,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        stereotype <- s.stereotype,
        sourceFlow <- s.sourceFlow)
}

-- ======================================================================
-- model copy end
-- ======================================================================
