-- Generated by: $Id: ModelUsageGenerator.atl 3141 2006-01-13 13:26:43Z dwagelaa $
query ModelUsage = (
	'helper context INMODEL!Class def : inclusionCondition() : Boolean = false\n' +
	if INMODEL!TagDefinition.allInstances()->select(e|e.oclIsTypeOf(INMODEL!TagDefinition))->notEmpty()
	then '    or self.name = \'TagDefinition\'\n'
	else '' endif +
	if INMODEL!ActionState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ActionState))->notEmpty()
	then '    or self.name = \'ActionState\'\n'
	else '' endif +
	if INMODEL!AssociationRole.allInstances()->select(e|e.oclIsTypeOf(INMODEL!AssociationRole))->notEmpty()
	then '    or self.name = \'AssociationRole\'\n'
	else '' endif +
	if INMODEL!Include.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Include))->notEmpty()
	then '    or self.name = \'Include\'\n'
	else '' endif +
	if INMODEL!CallEvent.allInstances()->select(e|e.oclIsTypeOf(INMODEL!CallEvent))->notEmpty()
	then '    or self.name = \'CallEvent\'\n'
	else '' endif +
	if INMODEL!ActivityGraph.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ActivityGraph))->notEmpty()
	then '    or self.name = \'ActivityGraph\'\n'
	else '' endif +
	if INMODEL!Guard.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Guard))->notEmpty()
	then '    or self.name = \'Guard\'\n'
	else '' endif +
	if INMODEL!NodeInstance.allInstances()->select(e|e.oclIsTypeOf(INMODEL!NodeInstance))->notEmpty()
	then '    or self.name = \'NodeInstance\'\n'
	else '' endif +
	if INMODEL!CollaborationInstanceSet.allInstances()->select(e|e.oclIsTypeOf(INMODEL!CollaborationInstanceSet))->notEmpty()
	then '    or self.name = \'CollaborationInstanceSet\'\n'
	else '' endif +
	if INMODEL!MappingExpression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!MappingExpression))->notEmpty()
	then '    or self.name = \'MappingExpression\'\n'
	else '' endif +
	if INMODEL!ActionSequence.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ActionSequence))->notEmpty()
	then '    or self.name = \'ActionSequence\'\n'
	else '' endif +
	if INMODEL!ElementImport.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ElementImport))->notEmpty()
	then '    or self.name = \'ElementImport\'\n'
	else '' endif +
	if INMODEL!DataValue.allInstances()->select(e|e.oclIsTypeOf(INMODEL!DataValue))->notEmpty()
	then '    or self.name = \'DataValue\'\n'
	else '' endif +
	if INMODEL!IterationExpression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!IterationExpression))->notEmpty()
	then '    or self.name = \'IterationExpression\'\n'
	else '' endif +
	if INMODEL!ProcedureExpression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ProcedureExpression))->notEmpty()
	then '    or self.name = \'ProcedureExpression\'\n'
	else '' endif +
	if INMODEL!TemplateParameter.allInstances()->select(e|e.oclIsTypeOf(INMODEL!TemplateParameter))->notEmpty()
	then '    or self.name = \'TemplateParameter\'\n'
	else '' endif +
	if INMODEL!Generalization.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Generalization))->notEmpty()
	then '    or self.name = \'Generalization\'\n'
	else '' endif +
	if INMODEL!EnumerationLiteral.allInstances()->select(e|e.oclIsTypeOf(INMODEL!EnumerationLiteral))->notEmpty()
	then '    or self.name = \'EnumerationLiteral\'\n'
	else '' endif +
	if INMODEL!Collaboration.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Collaboration))->notEmpty()
	then '    or self.name = \'Collaboration\'\n'
	else '' endif +
	if INMODEL!LinkEnd.allInstances()->select(e|e.oclIsTypeOf(INMODEL!LinkEnd))->notEmpty()
	then '    or self.name = \'LinkEnd\'\n'
	else '' endif +
	if INMODEL!Argument.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Argument))->notEmpty()
	then '    or self.name = \'Argument\'\n'
	else '' endif +
	if INMODEL!Artifact.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Artifact))->notEmpty()
	then '    or self.name = \'Artifact\'\n'
	else '' endif +
	if INMODEL!TaggedValue.allInstances()->select(e|e.oclIsTypeOf(INMODEL!TaggedValue))->notEmpty()
	then '    or self.name = \'TaggedValue\'\n'
	else '' endif +
	if INMODEL!Usage.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Usage))->notEmpty()
	then '    or self.name = \'Usage\'\n'
	else '' endif +
	if INMODEL!Operation.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Operation))->notEmpty()
	then '    or self.name = \'Operation\'\n'
	else '' endif +
	if INMODEL!AssociationEnd.allInstances()->select(e|e.oclIsTypeOf(INMODEL!AssociationEnd))->notEmpty()
	then '    or self.name = \'AssociationEnd\'\n'
	else '' endif +
	if INMODEL!AssociationClass.allInstances()->select(e|e.oclIsTypeOf(INMODEL!AssociationClass))->notEmpty()
	then '    or self.name = \'AssociationClass\'\n'
	else '' endif +
	if INMODEL!TerminateAction.allInstances()->select(e|e.oclIsTypeOf(INMODEL!TerminateAction))->notEmpty()
	then '    or self.name = \'TerminateAction\'\n'
	else '' endif +
	if INMODEL!ObjectSetExpression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ObjectSetExpression))->notEmpty()
	then '    or self.name = \'ObjectSetExpression\'\n'
	else '' endif +
	if INMODEL!SynchState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!SynchState))->notEmpty()
	then '    or self.name = \'SynchState\'\n'
	else '' endif +
	if INMODEL!Partition.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Partition))->notEmpty()
	then '    or self.name = \'Partition\'\n'
	else '' endif +
	if INMODEL!Exception.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Exception))->notEmpty()
	then '    or self.name = \'Exception\'\n'
	else '' endif +
	if INMODEL!ProgrammingLanguageDataType.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ProgrammingLanguageDataType))->notEmpty()
	then '    or self.name = \'ProgrammingLanguageDataType\'\n'
	else '' endif +
	if INMODEL!Actor.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Actor))->notEmpty()
	then '    or self.name = \'Actor\'\n'
	else '' endif +
	if INMODEL!ClassifierRole.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ClassifierRole))->notEmpty()
	then '    or self.name = \'ClassifierRole\'\n'
	else '' endif +
	if INMODEL!Reception.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Reception))->notEmpty()
	then '    or self.name = \'Reception\'\n'
	else '' endif +
	if INMODEL!ReturnAction.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ReturnAction))->notEmpty()
	then '    or self.name = \'ReturnAction\'\n'
	else '' endif +
	if INMODEL!Component.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Component))->notEmpty()
	then '    or self.name = \'Component\'\n'
	else '' endif +
	if INMODEL!CreateAction.allInstances()->select(e|e.oclIsTypeOf(INMODEL!CreateAction))->notEmpty()
	then '    or self.name = \'CreateAction\'\n'
	else '' endif +
	if INMODEL!Subsystem.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Subsystem))->notEmpty()
	then '    or self.name = \'Subsystem\'\n'
	else '' endif +
	if INMODEL!Extend.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Extend))->notEmpty()
	then '    or self.name = \'Extend\'\n'
	else '' endif +
	if INMODEL!Object.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Object))->notEmpty()
	then '    or self.name = \'Object\'\n'
	else '' endif +
	if INMODEL!DestroyAction.allInstances()->select(e|e.oclIsTypeOf(INMODEL!DestroyAction))->notEmpty()
	then '    or self.name = \'DestroyAction\'\n'
	else '' endif +
	if INMODEL!Expression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Expression))->notEmpty()
	then '    or self.name = \'Expression\'\n'
	else '' endif +
	if INMODEL!Enumeration.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Enumeration))->notEmpty()
	then '    or self.name = \'Enumeration\'\n'
	else '' endif +
	if INMODEL!ArgListsExpression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ArgListsExpression))->notEmpty()
	then '    or self.name = \'ArgListsExpression\'\n'
	else '' endif +
	if INMODEL!Interface.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Interface))->notEmpty()
	then '    or self.name = \'Interface\'\n'
	else '' endif +
	if INMODEL!ActionExpression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ActionExpression))->notEmpty()
	then '    or self.name = \'ActionExpression\'\n'
	else '' endif +
	if INMODEL!Comment.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Comment))->notEmpty()
	then '    or self.name = \'Comment\'\n'
	else '' endif +
	if INMODEL!UninterpretedAction.allInstances()->select(e|e.oclIsTypeOf(INMODEL!UninterpretedAction))->notEmpty()
	then '    or self.name = \'UninterpretedAction\'\n'
	else '' endif +
	if INMODEL!StubState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!StubState))->notEmpty()
	then '    or self.name = \'StubState\'\n'
	else '' endif +
	if INMODEL!Multiplicity.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Multiplicity))->notEmpty()
	then '    or self.name = \'Multiplicity\'\n'
	else '' endif +
	if INMODEL!ObjectFlowState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ObjectFlowState))->notEmpty()
	then '    or self.name = \'ObjectFlowState\'\n'
	else '' endif +
	if INMODEL!InteractionInstanceSet.allInstances()->select(e|e.oclIsTypeOf(INMODEL!InteractionInstanceSet))->notEmpty()
	then '    or self.name = \'InteractionInstanceSet\'\n'
	else '' endif +
	if INMODEL!MultiplicityRange.allInstances()->select(e|e.oclIsTypeOf(INMODEL!MultiplicityRange))->notEmpty()
	then '    or self.name = \'MultiplicityRange\'\n'
	else '' endif +
	if INMODEL!Association.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Association))->notEmpty()
	then '    or self.name = \'Association\'\n'
	else '' endif +
	if INMODEL!ExtensionPoint.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ExtensionPoint))->notEmpty()
	then '    or self.name = \'ExtensionPoint\'\n'
	else '' endif +
	if INMODEL!TemplateArgument.allInstances()->select(e|e.oclIsTypeOf(INMODEL!TemplateArgument))->notEmpty()
	then '    or self.name = \'TemplateArgument\'\n'
	else '' endif +
	if INMODEL!ComponentInstance.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ComponentInstance))->notEmpty()
	then '    or self.name = \'ComponentInstance\'\n'
	else '' endif +
	if INMODEL!SignalEvent.allInstances()->select(e|e.oclIsTypeOf(INMODEL!SignalEvent))->notEmpty()
	then '    or self.name = \'SignalEvent\'\n'
	else '' endif +
	if INMODEL!Signal.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Signal))->notEmpty()
	then '    or self.name = \'Signal\'\n'
	else '' endif +
	if INMODEL!ElementResidence.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ElementResidence))->notEmpty()
	then '    or self.name = \'ElementResidence\'\n'
	else '' endif +
	if INMODEL!Flow.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Flow))->notEmpty()
	then '    or self.name = \'Flow\'\n'
	else '' endif +
	if INMODEL!Permission.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Permission))->notEmpty()
	then '    or self.name = \'Permission\'\n'
	else '' endif +
	if INMODEL!BooleanExpression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!BooleanExpression))->notEmpty()
	then '    or self.name = \'BooleanExpression\'\n'
	else '' endif +
	if INMODEL!SendAction.allInstances()->select(e|e.oclIsTypeOf(INMODEL!SendAction))->notEmpty()
	then '    or self.name = \'SendAction\'\n'
	else '' endif +
	if INMODEL!ChangeEvent.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ChangeEvent))->notEmpty()
	then '    or self.name = \'ChangeEvent\'\n'
	else '' endif +
	if INMODEL!CallState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!CallState))->notEmpty()
	then '    or self.name = \'CallState\'\n'
	else '' endif +
	if INMODEL!Primitive.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Primitive))->notEmpty()
	then '    or self.name = \'Primitive\'\n'
	else '' endif +
	if INMODEL!CompositeState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!CompositeState))->notEmpty()
	then '    or self.name = \'CompositeState\'\n'
	else '' endif +
	if INMODEL!Dependency.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Dependency))->notEmpty()
	then '    or self.name = \'Dependency\'\n'
	else '' endif +
	if INMODEL!FinalState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!FinalState))->notEmpty()
	then '    or self.name = \'FinalState\'\n'
	else '' endif +
	if INMODEL!AssociationEndRole.allInstances()->select(e|e.oclIsTypeOf(INMODEL!AssociationEndRole))->notEmpty()
	then '    or self.name = \'AssociationEndRole\'\n'
	else '' endif +
	if INMODEL!Pseudostate.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Pseudostate))->notEmpty()
	then '    or self.name = \'Pseudostate\'\n'
	else '' endif +
	if INMODEL!ClassifierInState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!ClassifierInState))->notEmpty()
	then '    or self.name = \'ClassifierInState\'\n'
	else '' endif +
	if INMODEL!SubsystemInstance.allInstances()->select(e|e.oclIsTypeOf(INMODEL!SubsystemInstance))->notEmpty()
	then '    or self.name = \'SubsystemInstance\'\n'
	else '' endif +
	if INMODEL!Attribute.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Attribute))->notEmpty()
	then '    or self.name = \'Attribute\'\n'
	else '' endif +
	if INMODEL!TimeEvent.allInstances()->select(e|e.oclIsTypeOf(INMODEL!TimeEvent))->notEmpty()
	then '    or self.name = \'TimeEvent\'\n'
	else '' endif +
	if INMODEL!SubactivityState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!SubactivityState))->notEmpty()
	then '    or self.name = \'SubactivityState\'\n'
	else '' endif +
	if INMODEL!Message.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Message))->notEmpty()
	then '    or self.name = \'Message\'\n'
	else '' endif +
	if INMODEL!Stimulus.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Stimulus))->notEmpty()
	then '    or self.name = \'Stimulus\'\n'
	else '' endif +
	if INMODEL!Constraint.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Constraint))->notEmpty()
	then '    or self.name = \'Constraint\'\n'
	else '' endif +
	if INMODEL!Transition.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Transition))->notEmpty()
	then '    or self.name = \'Transition\'\n'
	else '' endif +
	if INMODEL!Node.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Node))->notEmpty()
	then '    or self.name = \'Node\'\n'
	else '' endif +
	if INMODEL!Stereotype.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Stereotype))->notEmpty()
	then '    or self.name = \'Stereotype\'\n'
	else '' endif +
	if INMODEL!Method.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Method))->notEmpty()
	then '    or self.name = \'Method\'\n'
	else '' endif +
	if INMODEL!UseCase.allInstances()->select(e|e.oclIsTypeOf(INMODEL!UseCase))->notEmpty()
	then '    or self.name = \'UseCase\'\n'
	else '' endif +
	if INMODEL!SubmachineState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!SubmachineState))->notEmpty()
	then '    or self.name = \'SubmachineState\'\n'
	else '' endif +
	if INMODEL!TimeExpression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!TimeExpression))->notEmpty()
	then '    or self.name = \'TimeExpression\'\n'
	else '' endif +
	if INMODEL!TypeExpression.allInstances()->select(e|e.oclIsTypeOf(INMODEL!TypeExpression))->notEmpty()
	then '    or self.name = \'TypeExpression\'\n'
	else '' endif +
	if INMODEL!CallAction.allInstances()->select(e|e.oclIsTypeOf(INMODEL!CallAction))->notEmpty()
	then '    or self.name = \'CallAction\'\n'
	else '' endif +
	if INMODEL!SimpleState.allInstances()->select(e|e.oclIsTypeOf(INMODEL!SimpleState))->notEmpty()
	then '    or self.name = \'SimpleState\'\n'
	else '' endif +
	if INMODEL!Abstraction.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Abstraction))->notEmpty()
	then '    or self.name = \'Abstraction\'\n'
	else '' endif +
	if INMODEL!UseCaseInstance.allInstances()->select(e|e.oclIsTypeOf(INMODEL!UseCaseInstance))->notEmpty()
	then '    or self.name = \'UseCaseInstance\'\n'
	else '' endif +
	if INMODEL!Interaction.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Interaction))->notEmpty()
	then '    or self.name = \'Interaction\'\n'
	else '' endif +
	if INMODEL!Parameter.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Parameter))->notEmpty()
	then '    or self.name = \'Parameter\'\n'
	else '' endif +
	if INMODEL!StateMachine.allInstances()->select(e|e.oclIsTypeOf(INMODEL!StateMachine))->notEmpty()
	then '    or self.name = \'StateMachine\'\n'
	else '' endif +
	if INMODEL!Model.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Model))->notEmpty()
	then '    or self.name = \'Model\'\n'
	else '' endif +
	if INMODEL!AttributeLink.allInstances()->select(e|e.oclIsTypeOf(INMODEL!AttributeLink))->notEmpty()
	then '    or self.name = \'AttributeLink\'\n'
	else '' endif +
	if INMODEL!Class.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Class))->notEmpty()
	then '    or self.name = \'Class\'\n'
	else '' endif +
	if INMODEL!Link.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Link))->notEmpty()
	then '    or self.name = \'Link\'\n'
	else '' endif +
	if INMODEL!LinkObject.allInstances()->select(e|e.oclIsTypeOf(INMODEL!LinkObject))->notEmpty()
	then '    or self.name = \'LinkObject\'\n'
	else '' endif +
	if INMODEL!DataType.allInstances()->select(e|e.oclIsTypeOf(INMODEL!DataType))->notEmpty()
	then '    or self.name = \'DataType\'\n'
	else '' endif +
	if INMODEL!Binding.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Binding))->notEmpty()
	then '    or self.name = \'Binding\'\n'
	else '' endif +
	if INMODEL!Package.allInstances()->select(e|e.oclIsTypeOf(INMODEL!Package))->notEmpty()
	then '    or self.name = \'Package\'\n'
	else '' endif +
	''
	).writeTo('ModelUsage.txt'.path());

uses Config;

