-- $Id$
query ModelCopyGenerator = INMODEL!Class.allInstances()->iterate(e; acc : String = 
	'-- Generated by: $Id$\n' +
	'module ModelCopy;\n\n' +
	'create OUT : OUTMODEL from IN : INMODEL;\n\n'|
	acc + e.toString()).
	writeTo('my_documents/PhD/Brainstorm/UML1CaseStudies/ModelCopy.atl');

-- adapt the above 'writeTo' expression to reflect your file path

helper context INMODEL!Class def : exclusionCondition() : Boolean =
	self.container.name='Diagram_Interchange';

-- adapt the above exclusion condition for your specific model

helper context INMODEL!Class def : toString() : String =
	if self.isAbstract or self.exclusionCondition() then
		''
	else
		'rule ' + self.name + ' {\n' +
		'    from s : INMODEL!' + self.name + self.inputConstraint() + '\n' +
		'    to t : OUTMODEL!' + self.name + ' mapsTo s (' +
		self.contentsToString() + ')\n' +
		'}\n\n'
	endif;

helper context INMODEL!GeneralizableElement def : inputConstraint() : String =
	if self.hasConcreteSubclasses() then
		' (s.oclIsTypeOf(INMODEL!' + self.name + '))'
	else
		''
	endif;

helper context INMODEL!GeneralizableElement def : hasConcreteSubclasses() : Boolean =
	not INMODEL!GeneralizableElement.allInstances()->select(e|
		e.supertypes->includes(self) and not e.isAbstract)->isEmpty();

helper context INMODEL!GeneralizableElement def : includesMember(member : INMODEL!ModelElement) : Boolean =
	self.contents->includes(member) or
	not self.supertypes->select(s|s.includesMember(member))->isEmpty();

helper context INMODEL!GeneralizableElement def : contentsToString() : String =
	self.referencesToString(self.attributesToString(''));

helper context INMODEL!GeneralizableElement def : attributesToString(head : String) : String =
	self.featuresToString(head, INMODEL!Attribute.allInstances());

helper context INMODEL!GeneralizableElement def : referencesToString(head : String) : String =
	self.featuresToString(head, INMODEL!Reference.allInstances()->
		select(r|r.referencedEnd.aggregation=#none));

helper context INMODEL!GeneralizableElement def : featuresToString(head : String, feature : Sequence(INMODEL!StructuralFeature)) : String =
	feature->select(f|self.includesMember(f))->iterate(e; acc : String = head |
		if acc.size() = 0 then
			'\n' + e.toString()
		else
			acc + ',\n' + e.toString()
		endif);

helper context INMODEL!ModelElement def : toAssignString() : String =
	if self.name.isKeyword() then
		'        "' + self.name + '" <- s."' + self.name + '"'
	else
		'        ' + self.name + ' <- s.' + self.name
	endif;

helper context INMODEL!Attribute def : toString() : String =
	self.toAssignString();

helper context INMODEL!Reference def : toString() : String =
	self.toAssignString();

helper context String def : isKeyword() : Boolean =
	Set{'module', 'create', 'from', 'rule', 'to', 'using', 'helper', 'context',
		'def', 'and', 'or', 'not', 'if', 'then', 'else', 'endif', 'query',
		'library', 'mapsTo', 'String', 'Boolean', 'Integer', 'Real', 'Bag',
		'Set', 'OrderedSet', 'Sequence'}->includes(self);
