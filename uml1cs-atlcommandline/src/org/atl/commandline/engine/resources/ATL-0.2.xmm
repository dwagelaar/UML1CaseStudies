<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<xmm>
  <pack name = 'PrimitiveTypes'>
    <ptyp name = 'Double'/>
    <ptyp name = 'Integer'/>
    <ptyp name = 'String'/>
    <ptyp name = 'Boolean'/>
  </pack>
  <pack name = 'Core'>
    <class name = 'Element'>
      <attr name = 'location' type = 'String' mult = '1-1'/>
    </class>
  </pack>
  <pack name = 'ATL'>
    <import name = 'PrimitiveTypes'/>
    <import name = 'OCL'/>
    <import name = 'Core'/>
    <class name = 'DerivedInPatternElement' super = 'InPatternElement'/>
    <class name = 'Query' super = 'Unit'/>
    <class name = 'Module' super = 'Unit'/>
    <class name = 'ActionBlock' super = 'Element'/>
    <class name = 'Unit' super = 'Element'>
      <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
    </class>
    <class name = 'Library' super = 'Unit'/>
    <class name = 'Rule' abstract = 'true' super = 'ModuleElement'>
      <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
    </class>
    <class name = 'OutPatternElement' abstract = 'true' super = 'PatternElement'/>
    <class name = 'InPattern' super = 'Element'/>
    <class name = 'OutPattern' super = 'Element'/>
    <class name = 'ModuleElement' abstract = 'true' super = 'Element'/>
    <class name = 'Helper' super = 'ModuleElement'/>
    <class name = 'SimpleInPatternElement' super = 'InPatternElement'/>
    <class name = 'InPatternElement' abstract = 'true' super = 'PatternElement'/>
    <class name = 'PatternElement' abstract = 'true' super = 'VariableDeclaration'/>
    <class name = 'CalledRule' super = 'Rule'/>
    <class name = 'Binding' super = 'Element'>
      <attr name = 'propertyName' type = 'String' mult = '1-1' ordered = 'true'/>
    </class>
    <class name = 'ForEachOutPatternElement' super = 'OutPatternElement'/>
    <class name = 'RuleVariableDeclaration' super = 'VariableDeclaration'/>
    <class name = 'LibraryRef' super = 'Element'>
      <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
    </class>
    <class name = 'MatchedRule' super = 'Rule'>
      <attr name = 'isAbstract' type = 'Boolean' mult = '1-1' ordered = 'true'/>
    </class>
    <class name = 'SimpleOutPatternElement' super = 'OutPatternElement'/>
    <asso name = 'A_rule_outPattern'>
      <end name = 'rule' type = 'Rule' nav = 'true' mult = '1-1' agg = 'composite'/>
      <end name = 'outPattern' type = 'OutPattern' nav = 'true' mult = '0-1'/>
    </asso>
    <asso name = 'A_inPattern_filter'>
      <end name = 'filter' type = 'OclExpression' nav = 'true' mult = '0-1'/>
      <end name = 'inPattern' type = 'InPattern' nav = 'false' mult = '0-1' agg = 'composite'/>
    </asso>
    <asso name = 'A_query_helpers'>
      <end name = 'query' type = 'Query' nav = 'true' mult = '0-1' agg = 'composite'/>
      <end name = 'helpers' type = 'Helper' nav = 'true' mult = '0-*' ordered = 'true'/>
    </asso>
    <asso name = 'A_query_body'>
      <end name = 'query' type = 'Query' nav = 'false' mult = '0-1' agg = 'composite'/>
      <end name = 'body' type = 'OclExpression' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_sourceElement_mapsTo'>
      <end name = 'sourceElement' type = 'InPatternElement' nav = 'true' mult = '0-1'/>
      <end name = 'mapsTo' type = 'OutPatternElement' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_derivedInPatternElement_value'>
      <end name = 'value' type = 'OclExpression' nav = 'true' mult = '1-1'/>
      <end name = 'derivedInPatternElement' type = 'DerivedInPatternElement' nav = 'false' mult = '0-1' agg = 'composite'/>
    </asso>
    <asso name = 'A_outPatternElement_bindings'>
      <end name = 'bindings' type = 'Binding' nav = 'true' mult = '0-*' ordered = 'true'/>
      <end name = 'outPatternElement' type = 'OutPatternElement' nav = 'true' mult = '1-1' agg = 'composite'/>
    </asso>
    <asso name = 'A_outPattern_elements'>
      <end name = 'outPattern' type = 'OutPattern' nav = 'true' mult = '1-1' agg = 'composite'/>
      <end name = 'elements' type = 'OutPatternElement' nav = 'true' mult = '1-*' ordered = 'true'/>
    </asso>
    <asso name = 'A_calledRule_parameters'>
      <end name = 'parameters' type = 'Parameter' nav = 'true' mult = '0-*'/>
      <end name = 'calledRule' type = 'CalledRule' nav = 'false' mult = '0-1' agg = 'composite'/>
    </asso>
    <asso name = 'A_children_super'>
      <end name = 'super' type = 'MatchedRule' nav = 'true' mult = '0-1'/>
      <end name = 'children' type = 'MatchedRule' nav = 'true' mult = '0-*'/>
    </asso>
    <asso name = 'A_forEachOutPatternElement_collection'>
      <end name = 'forEachOutPatternElement' type = 'ForEachOutPatternElement' nav = 'false' mult = '0-1' agg = 'composite'/>
      <end name = 'collection' type = 'OclExpression' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_rule_variables'>
      <end name = 'rule' type = 'Rule' nav = 'true' mult = '1-1' agg = 'composite'/>
      <end name = 'variables' type = 'RuleVariableDeclaration' nav = 'true' mult = '0-*' ordered = 'true'/>
    </asso>
    <asso name = 'A_helper_definition'>
      <end name = 'helper' type = 'Helper' nav = 'false' mult = '1-1' agg = 'composite'/>
      <end name = 'definition' type = 'OclFeatureDefinition' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_module_outModels'>
      <end name = 'module' type = 'Module' nav = 'false' mult = '0-1' agg = 'composite'/>
      <end name = 'outModels' type = 'OclModel' nav = 'true' mult = '1-*'/>
    </asso>
    <asso name = 'A_rule_actionBlock'>
      <end name = 'rule' type = 'Rule' nav = 'true' mult = '1-1' agg = 'composite'/>
      <end name = 'actionBlock' type = 'ActionBlock' nav = 'true' mult = '0-1'/>
    </asso>
    <asso name = 'A_inPattern_elements'>
      <end name = 'inPattern' type = 'InPattern' nav = 'true' mult = '1-1' agg = 'composite'/>
      <end name = 'elements' type = 'InPatternElement' nav = 'true' mult = '1-*'/>
    </asso>
    <asso name = 'A_module_inModels'>
      <end name = 'module' type = 'Module' nav = 'false' mult = '0-1' agg = 'composite'/>
      <end name = 'inModels' type = 'OclModel' nav = 'true' mult = '1-*' ordered='true'/>
    </asso>
    <asso name = 'A_forEachOutPatternElement_iterator'>
      <end name = 'forEachOutPatternElement' type = 'ForEachOutPatternElement' nav = 'false' mult = '0-1' agg = 'composite'/>
      <end name = 'iterator' type = 'Iterator' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_rule_inPattern'>
      <end name = 'inPattern' type = 'InPattern' nav = 'true' mult = '0-1'/>
      <end name = 'rule' type = 'MatchedRule' nav = 'true' mult = '1-1' agg = 'composite'/>
    </asso>
    <asso name = 'A_unit_libraries'>
      <end name = 'unit' type = 'Unit' nav = 'true' mult = '1-1' agg = 'composite'/>
      <end name = 'libraries' type = 'LibraryRef' nav = 'true' mult = '0-*'/>
    </asso>
    <asso name = 'A_module_elements'>
      <end name = 'module' type = 'Module' nav = 'true' mult = '1-1' agg = 'composite'/>
      <end name = 'elements' type = 'ModuleElement' nav = 'true' mult = '0-*' ordered = 'true'/>
    </asso>
    <asso name = 'A_library_helpers'>
      <end name = 'library' type = 'Library' nav = 'true' mult = '0-1' agg = 'composite'/>
      <end name = 'helpers' type = 'Helper' nav = 'true' mult = '0-*' ordered = 'true'/>
    </asso>
    <asso name = 'A_binding_value'>
      <end name = 'value' type = 'OclExpression' nav = 'true' mult = '1-1'/>
      <end name = 'binding' type = 'Binding' nav = 'false' mult = '0-1' agg = 'composite'/>
    </asso>
  </pack>
  <pack name = 'OCL'>
    <pack name = 'Expressions'>
      <class name = 'CollectionOperationCallExp' super = 'OperationCallExp'/>
      <class name = 'VariableExp' super = 'OclExpression'>
        <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'EmptyMapExp' super = 'OclExpression'/>
      <class name = 'RealExp' super = 'NumericExp'>
        <attr name = 'realSymbol' type = 'Double' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'PrimitiveExp' abstract = 'true' super = 'OclExpression'/>
      <class name = 'IterateExp' super = 'LoopExp'/>
      <class name = 'PropertyCallExp' abstract = 'true' super = 'OclExpression'/>
      <class name = 'TuplePart' super = 'VariableDeclaration'/>
      <class name = 'OclExpression' abstract = 'true' super = 'Element'/>
      <class name = 'IntegerExp' super = 'NumericExp'>
        <attr name = 'integerSymbol' type = 'Integer' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'EnumLiteralExp' super = 'OclExpression'>
        <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'OperatorCallExp' super = 'OperationCallExp'/>
      <class name = 'IteratorExp' super = 'LoopExp'>
        <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'StringExp' super = 'PrimitiveExp'>
        <attr name = 'stringSymbol' type = 'String' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'BooleanExp' super = 'PrimitiveExp'>
        <attr name = 'booleanSymbol' type = 'Boolean' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'LetExp' super = 'OclExpression'/>
      <class name = 'Iterator' super = 'VariableDeclaration'/>
      <class name = 'VariableDeclaration' super = 'Element'>
        <attr name = 'varName' type = 'String' mult = '1-1' ordered = 'true'/>
        <attr name = 'id' type = 'String' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'OperationCallExp' super = 'PropertyCallExp'>
        <attr name = 'operationName' type = 'String' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'NumericExp' abstract = 'true' super = 'PrimitiveExp'/>
      <class name = 'BagExp' super = 'CollectionExp'/>
      <class name = 'CollectionExp' abstract = 'true' super = 'OclExpression'/>
      <class name = 'IfExp' super = 'OclExpression'/>
      <class name = 'LoopExp' super = 'PropertyCallExp'/>
      <class name = 'TupleExp' super = 'OclExpression'/>
      <class name = 'SequenceExp' super = 'CollectionExp'/>
      <class name = 'NavigationOrAttributeCallExp' super = 'PropertyCallExp'>
        <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'SetExp' super = 'CollectionExp'/>
      <class name = 'OrderedSetExp' super = 'CollectionExp'/>
      <asso name = 'A_appliedProperty_source'>
        <end name = 'appliedProperty' type = 'PropertyCallExp' nav = 'false' mult = '0-1' agg = 'composite'/>
        <end name = 'source' type = 'OclExpression' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_initializedVariable_initExpression'>
        <end name = 'initializedVariable' type = 'VariableDeclaration' nav = 'true' mult = '0-1' agg = 'composite'/>
        <end name = 'initExpression' type = 'OclExpression' nav = 'true' mult = '0-1'/>
      </asso>
      <asso name = 'A_letExp_variable'>
        <end name = 'letExp' type = 'LetExp' nav = 'false' mult = '0-1' agg = 'composite'/>
        <end name = 'variable' type = 'VariableDeclaration' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_collection_elements'>
        <end name = 'collection' type = 'CollectionExp' nav = 'false' mult = '0-1' agg = 'composite'/>
        <end name = 'elements' type = 'OclExpression' nav = 'true' mult = '0-*' ordered = 'true'/>
      </asso>
      <asso name = 'A_ifExp_condition'>
        <end name = 'ifExp1' type = 'IfExp' nav = 'false' mult = '0-1' agg = 'composite'/>
        <end name = 'condition' type = 'OclExpression' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_loopExp_body'>
        <end name = 'loopExp' type = 'LoopExp' nav = 'false' mult = '0-1' agg = 'composite'/>
        <end name = 'body' type = 'OclExpression' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_ifExp_elseExpression'>
        <end name = 'ifExp3' type = 'IfExp' nav = 'false' mult = '0-1' agg = 'composite'/>
        <end name = 'elseExpression' type = 'OclExpression' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_letExp_in'>
        <end name = 'letExp' type = 'LetExp' nav = 'false' mult = '0-1' agg = 'composite'/>
        <end name = 'in_' type = 'OclExpression' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_baseExp_result'>
        <end name = 'baseExp' type = 'IterateExp' nav = 'true' mult = '0-1' agg = 'composite'/>
        <end name = 'result' type = 'VariableDeclaration' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_ifExp_thenExpression'>
        <end name = 'ifExp2' type = 'IfExp' nav = 'false' mult = '0-1' agg = 'composite'/>
        <end name = 'thenExpression' type = 'OclExpression' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_loopExpr_iterators'>
        <end name = 'loopExpr' type = 'LoopExp' nav = 'true' mult = '0-1' agg = 'composite'/>
        <end name = 'iterators' type = 'Iterator' nav = 'true' mult = '1-*'/>
      </asso>
      <asso name = 'A_parentOperation_arguments'>
        <end name = 'parentOperation' type = 'OperationCallExp' nav = 'true' mult = '0-1' agg = 'composite'/>
        <end name = 'arguments' type = 'OclExpression' nav = 'true' mult = '0-*' ordered = 'true'/>
      </asso>
      <asso name = 'A_variableExp_referredVariable'>
        <end name = 'variableExp' type = 'VariableExp' nav = 'true' mult = '0-*'/>
        <end name = 'referredVariable' type = 'VariableDeclaration' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_tuple_tuplePart'>
        <end name = 'tuple' type = 'TupleExp' nav = 'true' mult = '1-1' agg = 'composite'/>
        <end name = 'tuplePart' type = 'TuplePart' nav = 'true' mult = '0-*' ordered = 'true'/>
      </asso>
    </pack>
    <pack name = 'Types'>
      <class name = 'CollectionType' abstract = 'true' super = 'OclType'/>
      <class name = 'OclType' abstract = 'true' super = 'OclExpression'>
        <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'StringType' super = 'Primitive'/>
      <class name = 'Primitive' abstract = 'true' super = 'OclType'/>
      <class name = 'RealType' super = 'NumericType'/>
      <class name = 'TupleType' super = 'OclType'/>
      <class name = 'SequenceType' super = 'CollectionType'/>
      <class name = 'BooleanType' super = 'Primitive'/>
      <class name = 'OclModelElement' super = 'OclType'>
        <ocl name = '' expr = '&#10;def: getKey() : String =&#10;        self.model.name + &apos;!&apos; + self.name&#10;'/>
      </class>
      <class name = 'SetType' super = 'CollectionType'/>
      <class name = 'BagType' super = 'CollectionType'/>
      <class name = 'OrderedSetType' super = 'CollectionType'/>
      <class name = 'NumericType' abstract = 'true' super = 'Primitive'/>
      <class name = 'TupleTypeAttribute' super = 'Element'>
        <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
      </class>
      <class name = 'IntegerType' super = 'NumericType'/>
      <class name = 'MapType' super = 'OclType'/>
      <asso name = 'A_tupleTypeAttribute_type'>
        <end name = 'tupleTypeAttribute' type = 'TupleTypeAttribute' nav = 'false' mult = '0-1' agg = 'composite'/>
        <end name = 'type' type = 'OclType' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_mapType_valueType'>
        <end name = 'mapType2' type = 'MapType' nav = 'true' mult = '0-1' agg = 'composite'/>
        <end name = 'valueType' type = 'OclType' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_collectionTypes_elementType'>
        <end name = 'collectionTypes' type = 'CollectionType' nav = 'true' mult = '0-1' agg = 'composite'/>
        <end name = 'elementType' type = 'OclType' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_tupleType_attributes'>
        <end name = 'tupleType' type = 'TupleType' nav = 'true' mult = '1-1' agg = 'composite'/>
        <end name = 'attributes' type = 'TupleTypeAttribute' nav = 'true' mult = '0-*'/>
      </asso>
      <asso name = 'A_mapType_keyType'>
        <end name = 'mapType' type = 'MapType' nav = 'true' mult = '0-1' agg = 'composite'/>
        <end name = 'keyType' type = 'OclType' nav = 'true' mult = '1-1'/>
      </asso>
      <asso name = 'A_oclExpression_type'>
        <end name = 'type' type = 'OclType' nav = 'true' mult = '1-1'/>
        <end name = 'oclExpression' type = 'OclExpression' nav = 'false' mult = '0-1' agg = 'composite'/>
      </asso>
    </pack>
    <import name = 'PrimitiveTypes'/>
    <import name = 'Core'/>
    <class name = 'OclFeature' abstract = 'true' super = 'Element'>
      <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
    </class>
    <class name = 'Attribute' super = 'OclFeature'/>
    <class name = 'Operation' super = 'OclFeature'/>
    <class name = 'Parameter' super = 'VariableDeclaration'/>
    <class name = 'OclModel' super = 'Element'>
      <attr name = 'name' type = 'String' mult = '1-1' ordered = 'true'/>
    </class>
    <class name = 'OclContextDefinition' super = 'Element'/>
    <class name = 'OclFeatureDefinition' super = 'Element'/>
    <asso name = 'A_operation_parameters'>
      <end name = 'operation' type = 'Operation' nav = 'false' mult = '1-1' agg = 'composite'/>
      <end name = 'parameters' type = 'Parameter' nav = 'true' mult = '0-*' ordered = 'true'/>
    </asso>
    <asso name = 'A_attribute_initExpression'>
      <end name = 'attribute' type = 'Attribute' nav = 'false' mult = '0-1' agg = 'composite'/>
      <end name = 'initExpression' type = 'OclExpression' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_model_metamodel'>
      <end name = 'model' type = 'OclModel' nav = 'true' mult = '0-1' agg = 'composite'/>
      <end name = 'metamodel' type = 'OclModel' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_definition_feature'>
      <end name = 'definition' type = 'OclFeatureDefinition' nav = 'true' mult = '0-1' agg = 'composite'/>
      <end name = 'feature' type = 'OclFeature' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_attribute_type'>
      <end name = 'attribute' type = 'Attribute' nav = 'false' mult = '1-1' agg = 'composite'/>
      <end name = 'type' type = 'OclType' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_operation_returnType'>
      <end name = 'operation' type = 'Operation' nav = 'false' mult = '0-1' agg = 'composite'/>
      <end name = 'returnType' type = 'OclType' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_context_definitions'>
      <end name = 'definitions' type = 'OclContextDefinition' nav = 'true' mult = '0-1' agg = 'composite'/>
      <end name = 'context_' type = 'OclType' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_variableDeclaration_type'>
      <end name = 'type' type = 'OclType' nav = 'true' mult = '1-1'/>
      <end name = 'variableDeclaration' type = 'VariableDeclaration' nav = 'false' mult = '0-1' agg = 'composite'/>
    </asso>
    <asso name = 'A_operation_body'>
      <end name = 'operation' type = 'Operation' nav = 'false' mult = '0-1' agg = 'composite'/>
      <end name = 'body' type = 'OclExpression' nav = 'true' mult = '1-1'/>
    </asso>
    <asso name = 'A_definition_context_'>
      <end name = 'definition' type = 'OclFeatureDefinition' nav = 'true' mult = '1-1' agg = 'composite'/>
      <end name = 'context_' type = 'OclContextDefinition' nav = 'true' mult = '0-1'/>
    </asso>
    <asso name = 'A_model_elements'>
      <end name = 'model' type = 'OclModel' nav = 'true' mult = '1-1'/>
      <end name = 'elements' type = 'OclModelElement' nav = 'true' mult = '0-*'/>
    </asso>
  </pack>
  <ptyp name = 'void'/>
  <ptyp name = 'int'/>
</xmm>
