-- $Id$
query ModelUsageGenerator = INMODEL!Class.allInstances()->iterate(e; acc : String = 
	'-- Generated by: $Id$\n' +
	'query ModelUsage = (\n' +
	'	\'helper context INMODEL!Class def : inclusionCondition() : Boolean =\\n\' +\n' +
	thisModule.rootClassQueries() +
	'	).writeTo(\'my_documents/PhD/Brainstorm/UML1CaseStudies/ModelUsage.txt\');\n\n'|
	acc + e.toString()).
	writeTo('my_documents/PhD/Brainstorm/UML1CaseStudies/ModelUsage.atl');

-- adapt the above 'writeTo' expression to reflect your file path

helper context INMODEL!Class def : exclusionCondition() : Boolean =
	self.container.name='Diagram_Interchange';

-- adapt the above exclusion condition for your specific model

helper context INMODEL!Class def : toString() : String =
	if self.isAbstract or self.exclusionCondition() then
		''
	else
		'helper context INMODEL!' + self.name + ' def : toString() : String =\n' +
		'    \'    self.name = \\\'' + self.name + '\\\' or\\n\';\n\n'
	endif;

helper context INMODEL!Class def : toQueryString() : String =
	'	INMODEL!' + self.name + '.allInstances()->iterate(e; acc : String =\'\'\n' +
	'		|acc + e.toString()) +\n';

helper context INMODEL!Class def : isRoot() : Boolean =
	self.supertypes->isEmpty();

helper def : rootClasses() : Sequence(INMODEL!Class) =
	INMODEL!Class.allInstances()->select(c|c.isRoot());

helper def : rootClassQueries() : String =
	thisModule.rootClasses()->iterate(e; acc : String = ''|
		acc + e.toQueryString()) + '	\'\'\n';
