-- $Id$
module Accessors;

create OUT : OUTMODEL from IN : INMODEL;

uses strings;
uses Java;

-- ======================================================================
-- model-specific helpers begin
-- ======================================================================

helper context String def : stereotype() : INMODEL!Stereotype =
	INMODEL!Stereotype.allInstances()->select(s|s.name=self)->first();

helper context INMODEL!AssociationEnd def : isSingle() : Boolean =
	self.multiplicity.range->select(r|r.upper<>1)->isEmpty();

helper context INMODEL!AssociationEnd def : otherEnd() : INMODEL!AssociationEnd =
	self.association.connection->select(x|x<>self)->first();

helper context INMODEL!AssociationEnd def : navigableFrom() : INMODEL!Classifier =
	self.otherEnd().participant;

helper context INMODEL!Attribute def : hasAssociationEnd() : Boolean =
	not INMODEL!AssociationEnd.allInstances()->select(a|
		a.name=self.name and a.navigableFrom()=self.owner)->isEmpty();

helper context INMODEL!Attribute def : associationEnd() : INMODEL!AssociationEnd =
	INMODEL!AssociationEnd.allInstances()->select(a|
		a.name=self.name and a.navigableFrom()=self.owner)->first();

helper context INMODEL!Attribute def : originalType() : INMODEL!Classifier =
	if self.hasAssociationEnd() then
		self.associationEnd().participant
	else
		self.type
	endif;

helper context INMODEL!Attribute def : dualSetter() : String =
	if not self.associationEnd().otherEnd().isNavigable then
		self.name.javaSetter()
	else if self.associationEnd().otherEnd().isSingle() then
		self.name.javaDualSetter(self.associationEnd().otherEnd().name.firstToUpper())
	else
		self.name.javaAddRemoveSetter(self.associationEnd().otherEnd().name.firstToUpper())
	endif endif;
	
helper context INMODEL!Attribute def : setter() : String =
	if self.hasAssociationEnd() then
		self.dualSetter()
	else
		self.name.javaSetter()
	endif;

helper context INMODEL!Attribute def : dualAdder() : String =
	if not self.associationEnd().otherEnd().isNavigable then
		self.name.java2Adder()
	else if self.associationEnd().otherEnd().isSingle() then
		self.name.java2SetterAdder(self.associationEnd().otherEnd().name.firstToUpper())
	else
		self.name.java2DualAdder(self.associationEnd().otherEnd().name.firstToUpper())
	endif endif;
	
helper context INMODEL!Attribute def : adder() : String =
	if self.hasAssociationEnd() then
		self.dualAdder()
	else
		self.name.java2Adder()
	endif;

helper context INMODEL!Attribute def : dualRemover() : String =
	if not self.associationEnd().otherEnd().isNavigable then
		self.name.java2Remover()
	else if self.associationEnd().otherEnd().isSingle() then
		self.name.java2SetterRemover(self.associationEnd().otherEnd().name.firstToUpper())
	else
		self.name.java2DualRemover(self.associationEnd().otherEnd().name.firstToUpper())
	endif endif;
	
helper context INMODEL!Attribute def : remover() : String =
	if self.hasAssociationEnd() then
		self.dualRemover()
	else
		self.name.java2Remover()
	endif;

-- ======================================================================
-- model-specific helpers end
-- ======================================================================
	
-- ======================================================================
-- non-mapsTo rules begin
-- ======================================================================

rule PublicAttributeSetter {
	from s : INMODEL!Attribute (
		s.visibility = #vk_public and
		not s.type.name.isCollection())
	to op : OUTMODEL!Operation (
	   	name <- 'set' + s.name.firstToUpper(),
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par : OUTMODEL!Parameter (
	   	name <- s.name,
		behavioralFeature <- op,
		type <- s.type,
		kind <- #pdk_in),
	   mbody : OUTMODEL!ProcedureExpression (
	   	language <- 'java',
		body <- s.setter()),
	   meth : OUTMODEL!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : OUTMODEL!Dependency (
	   	name <- 'accessor ' + 'set' + s.name.firstToUpper() + '()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

rule PublicAttributeGetter {
	from s : INMODEL!Attribute (
		s.visibility = #vk_public)
	to op : OUTMODEL!Operation (
	   	name <- 'get' + s.name.firstToUpper() + s.type.name.s(),
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par : OUTMODEL!Parameter (
	   	name <- 'return',
		behavioralFeature <- op,
		type <- s.type,
		kind <- #pdk_return),
	   mbody : OUTMODEL!ProcedureExpression (
	   	language <- 'java',
		body <- s.name.javaGetter()),
	   meth : OUTMODEL!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : OUTMODEL!Dependency (
	   	name <- 'accessor ' + 'get' + s.name.firstToUpper() + s.type.name.s() + '()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

rule PublicAttributeAdder {
	from s : INMODEL!Attribute (
		s.visibility = #vk_public and
		s.type.name.isCollection())
	to op : OUTMODEL!Operation (
	   	name <- 'add' + s.name.firstToUpper(),
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par : OUTMODEL!Parameter (
	   	name <- s.name,
		behavioralFeature <- op,
		type <- s.originalType(),
		kind <- #pdk_in),
	   mbody : OUTMODEL!ProcedureExpression (
	   	language <- 'java',
		body <- s.adder()),
	   meth : OUTMODEL!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : OUTMODEL!Dependency (
	   	name <- 'accessor ' + 'add' + s.name.firstToUpper() + '()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

rule PublicAttributeRemover {
	from s : INMODEL!Attribute (
		s.visibility = #vk_public and
		s.type.name.isCollection())
	to op : OUTMODEL!Operation (
	   	name <- 'remove' + s.name.firstToUpper(),
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par : OUTMODEL!Parameter (
	   	name <- s.name,
		behavioralFeature <- op,
		type <- s.originalType(),
		kind <- #pdk_in),
	   mbody : OUTMODEL!ProcedureExpression (
	   	language <- 'java',
		body <- s.remover()),
	   meth : OUTMODEL!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : OUTMODEL!Dependency (
	   	name <- 'accessor ' + 'remove' + s.name.firstToUpper() + '()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

-- ======================================================================
-- non-mapsTo rules end
-- ======================================================================

-- ======================================================================
-- mapsTo rules begin
-- ======================================================================

rule Attribute {
	from s : INMODEL!Attribute
	using { vis : INMODEL!VisibilityKind =
		if s.visibility = #vk_public then #vk_private else s.visibility	endif; }
	to t : OUTMODEL!Attribute mapsTo s (
		name <- s.name,
		owner <- s.owner,
		stereotype <- s.stereotype,
		type <- s.type,
		visibility <- vis,
		ownerScope <- s.ownerScope,
		changeability <- s.changeability,
		isSpecification <- s.isSpecification,
		associationEnd <- s.associationEnd,
		initialValue <- s.initialValue)
}

-- ======================================================================
-- mapsTo rules end
-- ======================================================================

-- ======================================================================
-- model copy begin
-- ======================================================================

rule Model {
	from s : INMODEL!Model
	to t : OUTMODEL!Model mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		stereotype <- s.stereotype,
		isRoot <- s.isRoot,
		isLeaf <- s.isLeaf,
		isSpecification <- s.isSpecification,
		isAbstract <- s.isAbstract)
}

rule Package {
	from s : INMODEL!Package (s.oclIsTypeOf(INMODEL!Package))
	to t : OUTMODEL!Package mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		stereotype <- s.stereotype,
		isRoot <- s.isRoot,
		isLeaf <- s.isLeaf,
		isSpecification <- s.isSpecification,
		isAbstract <- s.isAbstract)
}

rule DataType {
	from s : INMODEL!DataType
	to t : OUTMODEL!DataType mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		stereotype <- s.stereotype,
		isRoot <- s.isRoot,
		isLeaf <- s.isLeaf,
		isSpecification <- s.isSpecification,
		isAbstract <- s.isAbstract)
}

rule Stereotype {
	from s : INMODEL!Stereotype
	to t : OUTMODEL!Stereotype mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		visibility <- s.visibility,
		baseClass <- s.baseClass)
}

rule TaggedValue {
	from s : INMODEL!TaggedValue
	to t : OUTMODEL!TaggedValue mapsTo s (
		name <- s.name,
		modelElement <- s.modelElement,
		isSpecification <- s.isSpecification,
		dataValue <- s.dataValue,
		type <- s.type,
		referenceValue <- s.referenceValue)
}

rule TagDefinition {
	from s : INMODEL!TagDefinition
	to t : OUTMODEL!TagDefinition mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		owner <- s.owner,
		tagType <- s.tagType,
		isSpecification <- s.isSpecification,
		multiplicity <- s.multiplicity)
}

rule Class {
	from s : INMODEL!Class
	to t : OUTMODEL!Class mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		stereotype <- s.stereotype,
		visibility <- s.visibility,
		isRoot <- s.isRoot,
		isLeaf <- s.isLeaf,
		isSpecification <- s.isSpecification,
		isAbstract <- s.isAbstract,
		isActive <- s.isActive)
}

rule Interface {
	from s : INMODEL!Interface
	to t : OUTMODEL!Interface mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		stereotype <- s.stereotype,
		visibility <- s.visibility,
		isRoot <- s.isRoot,
		isLeaf <- s.isLeaf,
		isSpecification <- s.isSpecification,
		isAbstract <- s.isAbstract)
}

rule Expression {
	from s : INMODEL!Expression (s.oclIsTypeOf(INMODEL!Expression))
	to t : OUTMODEL!Expression mapsTo s (
		language <- s.language,
		body <- s.body)
}

rule Operation {
	from s : INMODEL!Operation
	to t : OUTMODEL!Operation mapsTo s (
		name <- s.name,
		owner <- s.owner,
		stereotype <- s.stereotype,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isRoot <- s.isRoot,
		isLeaf <- s.isLeaf,
		isSpecification <- s.isSpecification,
		isQuery <- s.isQuery,
		isAbstract <- s.isAbstract,
		concurrency <- s.concurrency,
		parameter <- s.parameter)
}

rule Parameter {
	from s : INMODEL!Parameter
	to t : OUTMODEL!Parameter mapsTo s (
		name <- s.name,
		stereotype <- s.stereotype,
		type <- s.type,
		kind <- s.kind,
		isSpecification <- s.isSpecification,
		defaultValue <- s.defaultValue)
}

rule Method {
	from s : INMODEL!Method
	to t : OUTMODEL!Method mapsTo s (
		owner <- s.owner,
		stereotype <- s.stereotype,
		isSpecification <- s.isSpecification,
		isQuery <- s.isQuery,
		body <- s.body,
		specification <- s.specification)
}

rule ProcedureExpression {
	from s : INMODEL!ProcedureExpression
	to t : OUTMODEL!ProcedureExpression mapsTo s (
		language <- s.language,
		body <- s.body)
}

rule Association {
	from s : INMODEL!Association
	to t : OUTMODEL!Association mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		stereotype <- s.stereotype,
		isAbstract <- s.isAbstract)
}

rule AssociationEnd {
	from s : INMODEL!AssociationEnd
	to t : OUTMODEL!AssociationEnd mapsTo s (
		name <- s.name,
		association <- s.association,
		stereotype <- s.stereotype,
		participant <- s.participant,
		visibility <- s.visibility,
		targetScope <- s.targetScope,
		changeability <- s.changeability,
		ordering <- s.ordering,
		aggregation <- s.aggregation,
		isNavigable <- s.isNavigable,
		multiplicity <- s.multiplicity)
}

rule Multiplicity {
	from s : INMODEL!Multiplicity
	to t : OUTMODEL!Multiplicity mapsTo s
}

rule MultiplicityRange {
	from s : INMODEL!MultiplicityRange
	to t : OUTMODEL!MultiplicityRange mapsTo s (
		multiplicity <- s.multiplicity,
		lower <- s.lower,
		upper <- s.upper)
}

rule Dependency {
	from s : INMODEL!Dependency (s.oclIsTypeOf(INMODEL!Dependency))
	to t : OUTMODEL!Dependency mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		stereotype <- s.stereotype,
		isSpecification <- s.isSpecification,
		client <- s.client,
		supplier <- s.supplier)
}

rule Abstraction {
	from s : INMODEL!Abstraction
	to t : OUTMODEL!Abstraction mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		stereotype <- s.stereotype,
		isSpecification <- s.isSpecification,
		client <- s.client,
		supplier <- s.supplier)
}

rule Generalization {
	from s : INMODEL!Generalization
	to t : OUTMODEL!Generalization mapsTo s (
		name <- s.name,
		namespace <- s.namespace,
		stereotype <- s.stereotype,
		isSpecification <- s.isSpecification,
		parent <- s.parent,
		child <- s.child)
}

-- ======================================================================
-- model copy end
-- ======================================================================
