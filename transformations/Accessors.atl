-- $Id$
module Accessors;

create ACCESSORS : UML refining ATTRIBUTES : UML, OCLTYPES : UML;

uses Java;

-- ======================================================================
-- model merge helpers begin
-- ======================================================================
-- From: MergeModel.atl 1525 2005-06-17 10:29:30Z dwagelaa	

helper def : inElements : Set(UML!Element) = UML!Element.allInstancesFrom('ATTRIBUTES');
helper def : mergeElements : Set(UML!Element) = UML!Element.allInstancesFrom('OCLTYPES');

helper def : newElements : Sequence(UML!Element) = Sequence{
		UML!Classifier.allInstancesFrom('OCLTYPES')->select(c|c.notInSourceModel()),
		UML!Package.allInstancesFrom('OCLTYPES')->select(p|p.notInSourceModel()),
		UML!TagDefinition.allInstancesFrom('OCLTYPES')->select(t|t.notInSourceModel()),
		UML!Stereotype.allInstancesFrom('OCLTYPES')->select(s|s.notInSourceModel()),
		UML!Association.allInstancesFrom('OCLTYPES')->select(a|a.notInSourceModel()),
		UML!Dependency.allInstancesFrom('OCLTYPES')->select(d|d.notInSourceModel()),
		UML!Generalization.allInstancesFrom('OCLTYPES')->select(g|g.notInSourceModel())
	}->flatten();

helper context UML!ModelElement def : isInPackage() : Boolean =
	not UML!Package.allInstances()->select(p|
		p=self.namespace and p.oclIsTypeOf(UML!Package))->isEmpty();

helper context UML!ModelElement def : qName() : String =
	if self.isInPackage() then
		self.namespace.qName() + '.' + self.name
	else
		self.name
	endif;

------------------------------- Model -----------------------------------

helper context UML!Model def : notInSourceModel() : Boolean =
	false;

helper context UML!Model def : fromSourceModel() : UML!Model =
	UML!Model.allInstancesFrom('ATTRIBUTES')->asSequence()->first();

------------------------------- Classifier ------------------------------

helper context UML!Classifier def : notInSourceModel() : Boolean =
	UML!Classifier.allInstancesFrom('ATTRIBUTES')->select(e|e.qName()=self.qName())->isEmpty();

helper context UML!Classifier def : fromSourceModel() : UML!Classifier =
	UML!Classifier.allInstancesFrom('ATTRIBUTES')->select(e|e.qName()=self.qName())->first();

------------------------------- Package ---------------------------------

helper context UML!Package def : notInSourceModel() : Boolean =
	UML!Package.allInstancesFrom('ATTRIBUTES')->select(e|e.qName()=self.qName())->isEmpty();

helper context UML!Package def : fromSourceModel() : UML!Package =
	UML!Package.allInstancesFrom('ATTRIBUTES')->select(e|e.qName()=self.qName())->first();

------------------------------- TagDefinition ---------------------------

helper context UML!TagDefinition def : notInSourceModel() : Boolean =
	UML!TagDefinition.allInstancesFrom('ATTRIBUTES')->select(e|e.qName()=self.qName())->isEmpty();

helper context UML!TagDefinition def : fromSourceModel() : UML!TagDefinition =
	UML!TagDefinition.allInstancesFrom('ATTRIBUTES')->select(e|e.qName()=self.qName())->first();

------------------------------- Stereotype ------------------------------

helper context UML!Stereotype def : notInSourceModel() : Boolean =
	UML!Stereotype.allInstancesFrom('ATTRIBUTES')->select(e|e.qName()=self.qName())->isEmpty();

helper context UML!Stereotype def : fromSourceModel() : UML!Stereotype =
	UML!Stereotype.allInstancesFrom('ATTRIBUTES')->select(e|e.qName()=self.qName())->first();

------------------------------- Association -----------------------------

helper context UML!Association def : notInSourceModel() : Boolean =
	not self.connection->forAll(c|c.inSourceModel());

helper context UML!AssociationEnd def : inSourceModel() : Boolean =
	if self.isNavigable then
		not UML!AssociationEnd.allInstancesFrom('ATTRIBUTES')->select(e|e.isNavigable)->select(e|
			e.name=self.name and e.participant.qName()=self.participant.qName())->isEmpty()
	else if self.otherEnd().isNavigable then
		self.otherEnd().inSourceModel()
	else
		true
	endif endif;

helper context UML!AssociationEnd def : otherEnd() : UML!AssociationEnd =
	self.association.connection->select(x|x<>self)->first();

------------------------------- AssociationEnd --------------------------

helper context UML!AssociationEnd def : notInSourceModel() : Boolean =
	thisModule.newElements->includes(self.association);

------------------------------- TaggedValue -----------------------------

helper context UML!TaggedValue def : notInSourceModel() : Boolean =
	if thisModule.newElements->includes(self.modelElement) then
		true
	else
		self.modelElement.notInSourceModel()
	endif;

------------------------------- StructuralFeature -----------------------

helper context UML!StructuralFeature def : notInSourceModel() : Boolean =
	if thisModule.newElements->includes(self.owner) then
		true
	else
		self.owner.fromSourceModel().feature->select(f|
			f.name=self.name and f.oclIsKindOf(UML!StructuralFeature))
	endif;

------------------------------- Operation -------------------------------

helper context UML!Operation def : notInSourceModel() : Boolean =
	if thisModule.newElements->includes(self.owner) then
		true
	else
		self.owner.fromSourceModel().feature->select(f|
			f.name=self.name and f.oclIsKindOf(UML!Operation))->select(o|
				o.hasSameParametersAs(self))->isEmpty()
	endif;

helper context UML!BehavioralFeature def : hasSameParametersAs(f : UML!BehavioralFeature) : Boolean =
	f.parameter->select(p|not self.hasSameParameter(p))->isEmpty();
	
helper context UML!BehavioralFeature def : hasSameParameter(p : UML!Parameter) : Boolean =
	not self.parameter->select(sp|sp.kind=p.kind and sp.type.qName()=p.type.qName())->isEmpty();

------------------------------- Method ----------------------------------

helper context UML!Method def : notInSourceModel() : Boolean =
	if thisModule.newElements->includes(self.owner) then
		true
	else
		self.specification.notInSourceModel()
	endif;

------------------------------- Dependency ------------------------------

helper context UML!Dependency def : notInSourceModel() : Boolean =
	UML!Dependency.allInstancesFrom('ATTRIBUTES')->select(d|
		d.supplier->forAll(s1|self.supplier->forAll(s2|s1.qName()=s2.qName())) and
		d.client->forAll(c1|self.client->forAll(c2|c1.qName()=c2.qName())))->isEmpty();

------------------------------- Generalization --------------------------

helper context UML!Generalization def : notInSourceModel() : Boolean =
	UML!Generalization.allInstancesFrom('ATTRIBUTES')->select(g|
		g.parent.qName()=self.parent.qName() and
		g.child.qName()=self.child.qName())->isEmpty();

------------------------------- Parameter -------------------------------

helper context UML!Parameter def : notInSourceModel() : Boolean =
	if self.behavioralFeature.oclIsUndefined() then
		false
	else
		self.behavioralFeature.notInSourceModel()
	endif;

-- ======================================================================
-- model merge helpers end
-- ======================================================================

-- ======================================================================
-- model-specific helpers begin
-- ======================================================================

helper context String def : dataType() : UML!DataType =
	UML!DataType.allInstances()->select(c|c.name=self)->select(d|
		thisModule.inElements->includes(d) or 
		thisModule.newElements->includes(d))->first();

helper context String def : stereotype() : Set(UML!Stereotype) =
	UML!Stereotype.allInstances()->select(s|s.name=self)->select(d|
		thisModule.inElements->includes(d) or 
		thisModule.newElements->includes(d));

helper context UML!AssociationEnd def : isSingle() : Boolean =
	self.multiplicity.range->select(r|r.upper<>1)->isEmpty();

helper context UML!AssociationEnd def : otherEnd() : UML!AssociationEnd =
	self.association.connection->select(x|x<>self)->first();

helper context UML!AssociationEnd def : navigableFrom() : UML!Classifier =
	self.otherEnd().participant;

helper context UML!Attribute def : hasAssociationEnd() : Boolean =
	not UML!AssociationEnd.allInstances()->select(a|
		a.name=self.name and a.navigableFrom()=self.owner)->isEmpty();

helper context UML!Attribute def : associationEnd() : UML!AssociationEnd =
	UML!AssociationEnd.allInstances()->select(a|
		a.name=self.name and a.navigableFrom()=self.owner)->first();

helper context UML!Attribute def : originalType() : UML!Classifier =
	if self.hasAssociationEnd() then
		self.associationEnd().participant
	else
		self.type
	endif;

helper context UML!Attribute def : dualSetter() : String =
	if not self.associationEnd().otherEnd().isNavigable then
		self.name.javaSetter()
	else if self.associationEnd().otherEnd().isSingle() then
		self.name.javaDualSetter(self.associationEnd().otherEnd().name.stringFirstToUpper())
	else
		self.name.javaAddRemoveSetter(self.associationEnd().otherEnd().name.stringFirstToUpper())
	endif endif;
	
helper context UML!Attribute def : setter() : String =
	if self.hasAssociationEnd() then
		self.dualSetter()
	else
		self.name.javaSetter()
	endif;

helper context UML!Attribute def : dualAdder() : String =
	if not self.associationEnd().otherEnd().isNavigable then
		self.name.javaAdder()
	else if self.associationEnd().otherEnd().isSingle() then
		self.name.javaSetterAdder(self.associationEnd().otherEnd().name.stringFirstToUpper())
	else
		self.name.javaDualAdder(self.associationEnd().otherEnd().name.stringFirstToUpper())
	endif endif;
	
helper context UML!Attribute def : dualInsert() : String =
	if not self.associationEnd().otherEnd().isNavigable then
		self.name.javaInsert()
	else if self.associationEnd().otherEnd().isSingle() then
		self.name.javaSetterInsert(self.associationEnd().otherEnd().name.stringFirstToUpper())
	else
		self.name.javaDualInsert(self.associationEnd().otherEnd().name.stringFirstToUpper())
	endif endif;
	
helper context UML!Attribute def : adder() : String =
	if self.hasAssociationEnd() then
		self.dualAdder()
	else
		self.name.javaAdder()
	endif;

helper context UML!Attribute def : insert() : String =
	if self.hasAssociationEnd() then
		self.dualInsert()
	else
		self.name.javaInsert()
	endif;

helper context UML!Attribute def : dualRemover() : String =
	if not self.associationEnd().otherEnd().isNavigable then
		self.name.javaRemover()
	else if self.associationEnd().otherEnd().isSingle() then
		self.name.javaSetterRemover(self.associationEnd().otherEnd().name.stringFirstToUpper())
	else
		self.name.javaDualRemover(self.associationEnd().otherEnd().name.stringFirstToUpper())
	endif endif;
	
helper context UML!Attribute def : remover() : String =
	if self.hasAssociationEnd() then
		self.dualRemover()
	else
		self.name.javaRemover()
	endif;

-- ======================================================================
-- model-specific helpers end
-- ======================================================================
	
-- ======================================================================
-- non-mapsTo rules begin
-- ======================================================================

rule PublicAttributeSetter {
	from s : UML!Attribute (
		if thisModule.inElements->includes(s) then
			s.visibility = #vk_public and
			not s.type.name.isCollection()
		else false endif)
	to op : UML!Operation (
	   	name <- 'set' + s.name.stringFirstToUpper(),
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par : UML!Parameter (
	   	name <- s.name,
		behavioralFeature <- op,
		type <- s.type,
		kind <- #pdk_in),
	   mbody : UML!ProcedureExpression (
	   	language <- 'java',
		body <- s.setter()),
	   meth : UML!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : UML!Dependency (
	   	name <- 'accessor ' + 'set' + s.name.stringFirstToUpper() + '()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

rule PublicAttributeGetter {
	from s : UML!Attribute (
		if thisModule.inElements->includes(s) then
			s.visibility = #vk_public
		else false endif)
	to op : UML!Operation (
	   	name <- 'get' + s.name.stringFirstToUpper() + s.type.name.s(),
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par : UML!Parameter (
	   	name <- 'return',
		behavioralFeature <- op,
		type <- s.type,
		kind <- #pdk_return),
	   mbody : UML!ProcedureExpression (
	   	language <- 'java',
		body <- s.name.javaGetter()),
	   meth : UML!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : UML!Dependency (
	   	name <- 'accessor ' + 'get' + s.name.stringFirstToUpper() + s.type.name.s() + '()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

rule PublicAttributeGetAt {
	from s : UML!Attribute (
		if thisModule.inElements->includes(s) then
			s.visibility = #vk_public and
			s.type.name.isSequence()
		else false endif)
	to op : UML!Operation (
	   	name <- 'get' + s.name.stringFirstToUpper() + 'At',
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par1 : UML!Parameter (
	   	name <- 'index',
		behavioralFeature <- op,
		type <- 'Integer'.dataType(),
		kind <- #pdk_in),
	   par2 : UML!Parameter (
	   	name <- 'return',
		behavioralFeature <- op,
		type <- s.originalType(),
		kind <- #pdk_return),
	   mbody : UML!ProcedureExpression (
	   	language <- 'java',
		body <- s.name.javaGetAt(s.originalType().qName())),
	   meth : UML!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : UML!Dependency (
	   	name <- 'accessor ' + 'get' + s.name.stringFirstToUpper() + 'At()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

rule PublicAttributeAdder {
	from s : UML!Attribute (
		if thisModule.inElements->includes(s) then
			s.visibility = #vk_public and
			s.type.name.isCollection()
		else false endif)
	to op : UML!Operation (
	   	name <- 'add' + s.name.stringFirstToUpper(),
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par : UML!Parameter (
	   	name <- s.name,
		behavioralFeature <- op,
		type <- s.originalType(),
		kind <- #pdk_in),
	   mbody : UML!ProcedureExpression (
	   	language <- 'java',
		body <- s.adder()),
	   meth : UML!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : UML!Dependency (
	   	name <- 'accessor ' + 'add' + s.name.stringFirstToUpper() + '()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

rule PublicAttributeInsert {
	from s : UML!Attribute (
		if thisModule.inElements->includes(s) then
			s.visibility = #vk_public and
			s.type.name.isSequence()
		else false endif)
	to op : UML!Operation (
	   	name <- 'insert' + s.name.stringFirstToUpper(),
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par1 : UML!Parameter (
	   	name <- s.name,
		behavioralFeature <- op,
		type <- s.originalType(),
		kind <- #pdk_in),
	   par2 : UML!Parameter (
	   	name <- 'index',
		behavioralFeature <- op,
		type <- 'Integer'.dataType(),
		kind <- #pdk_in),
	   mbody : UML!ProcedureExpression (
	   	language <- 'java',
		body <- s.insert()),
	   meth : UML!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : UML!Dependency (
	   	name <- 'accessor ' + 'insert' + s.name.stringFirstToUpper() + '()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

rule PublicAttributeRemover {
	from s : UML!Attribute (
		if thisModule.inElements->includes(s) then
			s.visibility = #vk_public and
			s.type.name.isCollection()
		else false endif)
	to op : UML!Operation (
	   	name <- 'remove' + s.name.stringFirstToUpper(),
		owner <- s.owner,
		visibility <- s.visibility,
		ownerScope <- s.ownerScope,
		isAbstract <- false,
		concurrency <- #cck_sequential),
	   par : UML!Parameter (
	   	name <- s.name,
		behavioralFeature <- op,
		type <- s.originalType(),
		kind <- #pdk_in),
	   mbody : UML!ProcedureExpression (
	   	language <- 'java',
		body <- s.remover()),
	   meth : UML!Method (
	   	owner <- s.owner,
		body <- mbody,
		specification <- op),
	   dep : UML!Dependency (
	   	name <- 'accessor ' + 'remove' + s.name.stringFirstToUpper() + '()',
		namespace <- s.owner.namespace,
		stereotype <- 'accessor'.stereotype(),
		client <- op,
		supplier <- s)
}

-- ======================================================================
-- non-mapsTo rules end
-- ======================================================================

-- ======================================================================
-- mapsTo rules begin
-- ======================================================================

rule Attribute {
    from s : UML!Attribute (
    	thisModule.inElements->includes(s))
	using { vis : UML!VisibilityKind =
		if s.visibility = #vk_public then #vk_private else s.visibility	endif; }
    to t : UML!Attribute mapsTo s (
        multiplicity <- s.multiplicity,
        initialValue <- s.initialValue,
        changeability <- s.changeability,
        name <- s.name,
        ordering <- s.ordering,
        visibility <- vis,
        isSpecification <- s.isSpecification,
        targetScope <- s.targetScope,
        ownerScope <- s.ownerScope,
        stereotype <- s.stereotype,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        constraint <- s.constraint,
        targetFlow <- s.targetFlow,
        taggedValue <- s.taggedValue,
        clientDependency <- s.clientDependency,
        type <- s.type,
        sourceFlow <- s.sourceFlow)
}

-- ======================================================================
-- mapsTo rules end
-- ======================================================================

-- ======================================================================
-- model merge begin
-- ======================================================================
-- From: MergeModel.atl 1525 2005-06-17 10:29:30Z dwagelaa

rule MergeAssociation {
    from s : UML!Association (
    	if thisModule.newElements->includes(s) then
			s.oclIsTypeOf(UML!Association)
		else false endif)
    to t : UML!Association mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeTaggedValue {
    from s : UML!TaggedValue (
    	if thisModule.mergeElements->includes(s) then
	    	s.notInSourceModel()
		else false endif)
    to t : UML!TaggedValue mapsTo s (
        dataValue <- s.dataValue,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        referenceValue <- s.referenceValue,
		modelElement <- s.modelElement,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
        clientDependency <- s.clientDependency,
		type <- if thisModule.newElements->includes(s.type)
			then s.type
			else s.type.fromSourceModel() endif)
}

rule MergeOperation {
    from s : UML!Operation (
    	if thisModule.mergeElements->includes(s) then
	    	s.notInSourceModel()
		else false endif)
    to t : UML!Operation mapsTo s (
		owner <- if thisModule.newElements->includes(s.owner)
			then s.owner else s.owner.fromSourceModel() endif,
		ownerScope <- s.ownerScope,
        visibility <- s.visibility,
        isQuery <- s.isQuery,
        isAbstract <- s.isAbstract,
        concurrency <- s.concurrency,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isRoot <- s.isRoot,
        isLeaf <- s.isLeaf,
        specification <- s.specification,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif))
}

rule MergeAbstraction {
    from s : UML!Abstraction (
    	thisModule.newElements->includes(s))
    to t : UML!Abstraction mapsTo s (
        mapping <- s.mapping,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        comment <- s.comment,
		client <- s.client->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		supplier <- s.supplier->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeParameter {
    from s : UML!Parameter (
    	if thisModule.mergeElements->includes(s) then
	    	s.notInSourceModel()
		else false endif)
    to t : UML!Parameter mapsTo s (
		behavioralFeature <- s.behavioralFeature,
        kind <- s.kind,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        defaultValue <- s.defaultValue,
        comment <- s.comment,
		type <- if thisModule.newElements->includes(s.type)
			then s.type
			else s.type.fromSourceModel() endif,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif))
}

rule MergeClass {
    from s : UML!Class (
    	if thisModule.newElements->includes(s) then
			s.oclIsTypeOf(UML!Class)
		else false endif)
    to t : UML!Class mapsTo s (
        isRoot <- s.isRoot,
        isActive <- s.isActive,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeInterface {
    from s : UML!Interface (
    	thisModule.newElements->includes(s))
    to t : UML!Interface mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeDataType {
    from s : UML!DataType (
    	if thisModule.newElements->includes(s) then
			s.oclIsTypeOf(UML!DataType)
		else false endif)
    to t : UML!DataType mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergePackage {
    from s : UML!Package (
    	if thisModule.newElements->includes(s) then
			s.oclIsTypeOf(UML!Package)
		else false endif)
    to t : UML!Package mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeAssociationEnd {
    from s : UML!AssociationEnd (
    	if thisModule.mergeElements->includes(s) then
	    	if s.oclIsTypeOf(UML!AssociationEnd) then
	    		s.notInSourceModel()
			else false endif
		else false endif)
    to t : UML!AssociationEnd mapsTo s (
		association <- s.association,
        targetScope <- s.targetScope,
        isNavigable <- s.isNavigable,
        ordering <- s.ordering,
        changeability <- s.changeability,
        multiplicity <- s.multiplicity,
        aggregation <- s.aggregation,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        qualifier <- s.qualifier,
		participant <- if thisModule.newElements->includes(s.participant)
			then s.participant
			else s.participant.fromSourceModel() endif,
        comment <- s.comment,
        constraint <- s.constraint,
        specification <- s.specification->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif))
}

rule MergeAttribute {
    from s : UML!Attribute (
    	if thisModule.mergeElements->includes(s) then
	    	s.notInSourceModel()
		else false endif)
    to t : UML!Attribute mapsTo s (
		owner <- if thisModule.newElements->includes(s.owner)
			then s.owner
			else s.owner.fromSourceModel() endif,
        targetScope <- s.targetScope,
        initialValue <- s.initialValue,
        ownerScope <- s.ownerScope,
        visibility <- s.visibility,
        changeability <- s.changeability,
        ordering <- s.ordering,
        name <- s.name,
        isSpecification <- s.isSpecification,
        multiplicity <- s.multiplicity,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		type <- if thisModule.newElements->includes(s.type)
			then s.type
			else s.type.fromSourceModel() endif)
}

rule MergeGeneralization {
    from s : UML!Generalization (
    	thisModule.newElements->includes(s))
    to t : UML!Generalization mapsTo s (
        discriminator <- s.discriminator,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        powertype <- if s.powertype.oclIsUndefined()
			then s.powertype
			else if thisModule.newElements->includes(s.powertype)
			then s.powertype
			else s.powertype.fromSourceModel() endif endif,
		parent <- if thisModule.newElements->includes(s.parent)
			then s.parent
			else s.parent.fromSourceModel() endif,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		child <- if thisModule.newElements->includes(s.child)
			then s.child
			else s.child.fromSourceModel() endif,
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeDependency {
    from s : UML!Dependency (
    	if thisModule.newElements->includes(s) then
			s.oclIsTypeOf(UML!Dependency)
		else false endif)
    to t : UML!Dependency mapsTo s (
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        comment <- s.comment,
		client <- s.client->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		supplier <- s.supplier->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeTagDefinition {
    from s : UML!TagDefinition (
    	thisModule.newElements->includes(s))
    to t : UML!TagDefinition mapsTo s (
		owner <- if thisModule.newElements->includes(s.owner)
			then s.owner
			else s.owner.fromSourceModel() endif,
        tagType <- s.tagType,
        multiplicity <- s.multiplicity,
        visibility <- s.visibility,
        name <- s.name,
        isSpecification <- s.isSpecification,
        templateParameter <- s.templateParameter,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeStereotype {
    from s : UML!Stereotype (
    	thisModule.newElements->includes(s))
    to t : UML!Stereotype mapsTo s (
        isRoot <- s.isRoot,
        isAbstract <- s.isAbstract,
        baseClass <- s.baseClass,
        visibility <- s.visibility,
        name <- s.name,
        icon <- s.icon,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        comment <- s.comment,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
        stereotypeConstraint <- s.stereotypeConstraint,
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

rule MergeMethod {
    from s : UML!Method (
    	if thisModule.mergeElements->includes(s) then
	    	s.notInSourceModel()
		else false endif)
    to t : UML!Method mapsTo s (
		owner <- if thisModule.newElements->includes(s.owner)
			then s.owner
			else s.owner.fromSourceModel() endif,
		body <- s.body,
        ownerScope <- s.ownerScope,
        visibility <- s.visibility,
        isQuery <- s.isQuery,
        name <- s.name,
        isSpecification <- s.isSpecification,
        comment <- s.comment,
        specification <- s.specification,
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif))
}

rule MergeException {
    from s : UML!Exception (
    	thisModule.newElements->includes(s))
    to t : UML!Exception mapsTo s (
        isRoot <- s.isRoot,
        name <- s.name,
        isAbstract <- s.isAbstract,
        visibility <- s.visibility,
        isSpecification <- s.isSpecification,
        isLeaf <- s.isLeaf,
        "context" <- s."context"->collect(e|if e.notInSourceModel()
			then e else e.fromSourceModel() endif),
        constraint <- s.constraint,
		stereotype <- s.stereotype->collect(e|if thisModule.newElements->includes(e)
        	then e else e.fromSourceModel() endif),
        comment <- s.comment,
		namespace <- if thisModule.newElements->includes(s.namespace)
			then s.namespace
			else s.namespace.fromSourceModel() endif)
}

-- ======================================================================
-- model merge end
-- ======================================================================
